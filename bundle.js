(()=>{var __webpack_modules__={852:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXTERNAL MODULE: ./src/js/observer.js\nvar observer = __webpack_require__(501);\n;// CONCATENATED MODULE: ./src/js/libs/gerUniformRandVariable.js\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\nfunction gerUniformRandVariable(emptyArray, initValue, finalValue, qtdOfVariables) {\n  var range = finalValue - initValue;\n  var mod = 10000000000;\n  var seed = getRandomInt(0, mod);\n  var c = getRandomInt(0, 1000000);\n  emptyArray.push(seed * range / mod + initValue);\n  for (var i = 0; i < qtdOfVariables - 1; i++) {\n    seed = (13 * seed + c) % mod;\n    emptyArray.push(seed * range / mod + initValue);\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerHistogram.js\nfunction gerHistogram(intervals, obj, initValue, finalValue) {\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    obj.arrayIntervals.push({\n      \"indexOfInterval\": deltaX * i + initValue,\n      \"count\": 0\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/fillHistogram.js\nfunction fillHistogram(AleatoryVar, Histogram) {\n  for (var i = 0; i < AleatoryVar.length; i++) {\n    for (var j = Histogram.arrayIntervals.length; j >= 1; j--) {\n      if (Histogram.arrayIntervals[j - 1].indexOfInterval <= AleatoryVar[i]) {\n        Histogram.arrayIntervals[j - 1].count += 1;\n        break;\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/average.js\nfunction average(randomVar) {\n  var variance = 0;\n  var sum = randomVar.reduce(function (acc, current) {\n    return acc + current;\n  }, 0);\n  var media = sum / randomVar.length;\n  randomVar.forEach(function (e) {\n    variance = variance + Math.pow(media - e, 2);\n  });\n  var averageBlock = document.querySelector('.average');\n  var varianceBlock = document.querySelector('.variance');\n  averageBlock.innerHTML = \"\\n    <p> Media <br> <strong>\".concat((sum / randomVar.length).toFixed(3), \"</strong></p>\");\n  varianceBlock.innerHTML = \"<p> Variancia<br> <strong>\".concat((variance / randomVar.length).toFixed(3), \"</strong></p>\");\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerCDF.js\nfunction gerCDF(AleatoryVar, cdfData, initValue, finalValue, qtdOfVariables) {\n  cdfData = [];\n  var intervals = 200;\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    cdfData.push({\n      \"indexOfInterval\": deltaX * (i + 1) + initValue,\n      \"count\": 0,\n      \"prob\": 0\n    });\n  }\n  for (i in AleatoryVar) {\n    for (var j = intervals - 1; j >= 0; j--) {\n      if (AleatoryVar[i] > cdfData[j].indexOfInterval - deltaX) {\n        cdfData[j].count++;\n        break;\n      }\n    }\n  }\n  for (i in cdfData) {\n    cdfData[i].prob = cdfData[i].count / qtdOfVariables;\n  }\n  for (var i = 1; i < cdfData.length; i++) {\n    cdfData[i].prob = cdfData[i].prob + cdfData[i - 1].prob;\n  }\n  return cdfData;\n}\n;// CONCATENATED MODULE: ./src/js/libs/printCDF.js\nfunction printCDF(probsOfCDF, valuesOfAxixsXonCDF, cdfGraphic) {\n  cdfGraphic.innerHTML = '';\n  var options2 = {\n    chart: {\n      type: 'line',\n      height: '440px'\n    },\n    title: {\n      text: 'Cumulativa de probabilidade',\n      align: 'center',\n      margin: 10,\n      floating: false,\n      style: {\n        fontSize: '20px',\n        fontWeight: 'bold',\n        fontFamily: 'Raleway',\n        color: '#263238'\n      }\n    },\n    stroke: {\n      curve: 'straight',\n      lineCap: 'round',\n      colors: '#dd9f82'\n    },\n    series: [{\n      name: 'Probabilidade',\n      data: probsOfCDF\n    }],\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        gradientToColors: ['#e65c4f'],\n        shadeIntensity: 1,\n        type: 'vertical',\n        opacityFrom: 1,\n        opacityTo: 1\n      }\n    },\n    xaxis: {\n      type: 'probabilidade de ser menor que',\n      tickAmount: 12,\n      categories: valuesOfAxixsXonCDF\n    },\n    yaxis: {\n      tickAmount: 8,\n      min: 0,\n      max: 1\n    }\n  };\n  var chart2 = new ApexCharts(cdfGraphic, options2);\n  chart2.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/printHistogram.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction printHistogram(probsOfIntervals, valuesOfAxixsX, graphicArea) {\n  var maxProb = probsOfIntervals[0];\n  graphicArea.innerHTML = '';\n  var _iterator = _createForOfIteratorHelper(probsOfIntervals),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var x = _step.value;\n      if (x > maxProb) {\n        maxProb = x;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var options = {\n    chart: {\n      type: 'histogram',\n      height: '440px'\n    },\n    title: {\n      text: 'Densidade de probabilidade',\n      align: 'center',\n      margin: 10,\n      floating: false,\n      style: {\n        fontSize: '20px',\n        fontWeight: 'bold',\n        fontFamily: 'Raleway',\n        color: '#263238'\n      }\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 3,\n        borderRadiusApplication: 'end',\n        columnWidth: '85%'\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    series: [{\n      name: 'Probabilidade',\n      data: probsOfIntervals\n    }],\n    xaxis: {\n      tickAmount: 10,\n      categories: valuesOfAxixsX\n    },\n    yaxis: {\n      tickAmount: 4,\n      min: 0,\n      max: maxProb * 1.1\n    },\n    colors: ['#208174', '#66DA26', '#546E7A', '#E91E63', '#FF9800']\n  };\n  var chart = new ApexCharts(graphicArea, options);\n  chart.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerExpVariable.js\n\nfunction gerExpVariable(lambda, qtdOfVariables) {\n  var a = [];\n  gerUniformRandVariable(a, 0, 1, qtdOfVariables);\n  var expArray = [];\n  for (var i = 0; i < qtdOfVariables; i++) {\n    expArray.push(-(1 / lambda * Math.log(1 - a[i])));\n  }\n  return expArray;\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerGausVariable.js\n\n\nfunction gerGausVariable(average, variance, qtdOfVariables) {\n  var a = [];\n  var b = [];\n  var gaus = [];\n  var aux = 0;\n  for (var i = 0; i < 12; i++) {\n    b = [];\n    gerUniformRandVariable(b, 0, 1, qtdOfVariables);\n    a.push(b);\n  }\n  for (var j = 0; j < qtdOfVariables; j++) {\n    aux = 0;\n    for (var i = 0; i < 12; i++) {\n      aux += a[i][j];\n    }\n    gaus.push(aux - 6);\n  }\n  var max = gaus[0];\n  var min = gaus[0];\n  for (var i = 0; i < qtdOfVariables; i++) {\n    gaus[i] = average + gaus[i] * Math.sqrt(variance);\n    if (gaus[i] > max) {\n      max = gaus[i];\n    } else if (gaus[i] < min) {\n      min = gaus[i];\n    }\n  }\n  return {\n    \"array\": gaus,\n    \"maxValue\": max,\n    \"minValue\": min\n  };\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerWeibullVariable.js\n\nfunction gerWeibullVariable(weibullArray, lambda, beta, qtdOfVariables) {\n  var array = [];\n  gerUniformRandVariable(array, 0, 1, qtdOfVariables);\n  var max = -10000000;\n  var min = 10000000;\n  if (beta < 0 || lambda < 0) {\n    alert(\"Entre com valores maiores que 0\");\n  } else {\n    var max = [];\n    var lnX = 0;\n    for (var i = 0; i < qtdOfVariables; i++) {\n      lnX = -1 * Math.log(array[i]);\n      var aux = Math.pow(lnX, 1 / beta);\n      //var aux = Math.pow(Math.log(array[i]), 1/beta);\n      weibullArray.push(lambda * aux);\n      if (weibullArray[i] > max) {\n        max = weibullArray[i];\n      } else if (weibullArray[i] < min) {\n        min = weibullArray[i];\n      }\n    }\n  }\n  return {\n    \"min\": min,\n    \"max\": max\n  };\n}\n;// CONCATENATED MODULE: ./src/js/renderHistogram.js\n\n\n\n\n\n\n\n\n\n\nvar randomVariable = [];\nvar cdfData;\nvar refreshGraph = document.querySelector('#refreshGraph');\nvar histogramGraphic = document.querySelector('.graphArea');\nvar cdfGraphic = document.querySelector('.cdfGraphic');\nif (renderAllGraphics()) {\n  average(randomVariable);\n}\n;\nrefreshGraph.addEventListener('click', function (e) {\n  e.preventDefault();\n  renderAllGraphics();\n  average(randomVariable);\n});\nfunction renderAllGraphics() {\n  randomVariable = [];\n  cdfData = [];\n  var objHistogram = {\n    \"qtdOfIntervals\": 0,\n    \"arrayIntervals\": []\n  };\n  var valuesOfAxixsXonCDF = [];\n  var form = document.querySelector('form');\n  var initialValue = parseFloat(form.querySelector('#initialValue').value);\n  var finalValue = parseFloat(form.querySelector('#finalValue').value);\n  var qtdOfVariables = parseFloat(form.querySelector('#qtdOfVariables').value);\n  var intervals = parseFloat(form.querySelector('#intervals').value);\n  var typeOfVariable = form.querySelector(\"input:checked\");\n  switch (typeOfVariable.value) {\n    case \"uniform\":\n      gerUniformRandVariable(randomVariable, initialValue, finalValue, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, initialValue, finalValue);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, initialValue, finalValue, qtdOfVariables);\n      valuesOfAxixsXonCDF = [initialValue];\n      break;\n    case \"weibull\":\n      var lambdaW = parseFloat(document.querySelector('#lambdaW').value);\n      var betaW = parseFloat(document.querySelector('#betaW').value);\n      var minMax = gerWeibullVariable(randomVariable, lambdaW, betaW, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, minMax.min * 0.40, minMax.max);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, minMax.min * 0.98, minMax.max * 1.01, qtdOfVariables);\n      valuesOfAxixsXonCDF = [minMax.min * 0.98];\n      break;\n    case \"exponential\":\n      var lambda = parseFloat(form.querySelector(\"#lambda\").value);\n      var finalVal = -(1 / lambda * Math.log(1 - 0.99954));\n      randomVariable = gerExpVariable(lambda, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, 0, finalVal);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, 0, finalVal, qtdOfVariables);\n      valuesOfAxixsXonCDF = [0];\n      break;\n    case \"gaussiana\":\n      var variance2 = parseFloat(form.querySelector(\"#variance\").value);\n      var average2 = parseFloat(form.querySelector(\"#average\").value);\n      var aux = gerGausVariable(average2, variance2, qtdOfVariables);\n      randomVariable = aux.array;\n      gerHistogram(intervals, objHistogram, aux.minValue, aux.maxValue);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, aux.minValue, aux.maxValue, qtdOfVariables);\n      valuesOfAxixsXonCDF = [aux.minValue];\n      break;\n    default:\n      return true;\n  }\n  setTimeout(function () {\n    var valuesOfAxixsX = [];\n    var count = [];\n    var countOfCDF = [0];\n    objHistogram.arrayIntervals.forEach(function (e) {\n      valuesOfAxixsX.push(\"\\n      \".concat(e.indexOfInterval.toFixed(2).toString(), \" -\\n      \").concat((e.indexOfInterval + (finalValue - initialValue) / intervals).toFixed(2).toString()));\n      count.push(e.count / qtdOfVariables);\n    });\n    cdfData.forEach(function (e) {\n      valuesOfAxixsXonCDF.push(\"\\n      \".concat(e.indexOfInterval.toFixed(2)));\n      countOfCDF.push(e.prob.toFixed(4));\n    });\n    printHistogram(count, valuesOfAxixsX, histogramGraphic);\n    printCDF(countOfCDF, valuesOfAxixsXonCDF, cdfGraphic);\n    console.log(cdfData.indexOfIntervals);\n  }, 0);\n  return true;\n}\n;// CONCATENATED MODULE: ./src/js/index.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///852\n")},501:()=>{eval("var fieldsetCheck = document.querySelector('.fieldsetParemeters');\nvar gaussianaInputArea = document.querySelector('.gaussianaInputArea');\nvar uniformInputArea = document.querySelector('.uniformInputArea');\nvar exponentialInputArea = document.querySelector('.exponentialInputArea');\nvar weibullInputArea = document.querySelector('.weibullInputArea');\nvar explainParameters = document.querySelector('.explainParameters');\nchangeType();\nfunction changeType() {\n  gaussianaInputArea.style.display = 'none';\n  var typOfVariable = fieldsetCheck.querySelector('input:checked');\n  if (typOfVariable.value == 'exponential') {\n    exponentialInputArea.style.display = 'flex';\n    uniformInputArea.style.display = 'none';\n    gaussianaInputArea.style.display = 'none';\n    weibullInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <p>\\n        Para gerar um variavel com distribui\\xE7\\xE3o exponencial, gerei uma variavel aleatoria entre 0 e 1, e para cada variavel aleatoria uniforme apliquei a formula <code>\\n        expArray.push(-((1/\\u03BB)*(Math.log(1-a[i]))))\\n        </code>\\n        onde expArray \\xE9 o vetor que armazena todas as variaveis aleatorias <code>.push()</code> \\xE9 a fun\\xE7\\xE3o que joga o valor para ultima posi\\xE7\\xE3o do vetor e <code>\\n        -(1/\\u03BB)*(Math.log(1-a[i]))\\n        </code> \\xE9 a equa\\xE7\\xE3o que gera qualquer variavel exponencial a partir de uma uniforme. \\n        \\n        <br><br>\\n        A variancia e media s\\xE3o valores muito proximos do estimado por\\xE9m com uma margem de erro minima, isso acontece pois apesar da distrubui\\xE7\\xE3o uniforme ser feita para se aproximar da real \\xE9 muito improvavel\\n        \\n        </p>\\n        \";\n  } else if (typOfVariable.value == 'gaussiana') {\n    gaussianaInputArea.style.display = 'flex';\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'none';\n    weibullInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <p>\\n        Primeiro tenho o vetor b responsavel por receber as 12 variaveis aleatorias geradas para forma um distrubui\\xE7\\xE3o gaussiana. O vetor a recebe os valores de b formando uma matriz 12x10000 e apos isso somo os valores de cada indice de coluna e jogo em um vetor <code>gaus[]</code> para em seguida tranformar o vetor com a equa\\xE7\\xE3o <code>\\n        gaus[i] = average + gaus[i] * Math.sqrt(variance)\\n        </code>. <br><br>\\n        A variancia e media s\\xE3o valores muito proximos do estimado por\\xE9m com uma margem de erro minima, isso acontece pois apesar da distrubui\\xE7\\xE3o uniforme ser feita para se aproximar da real \\xE9 muito improvavel\\n        </p>\\n        \";\n  } else if (typOfVariable.value == 'weibull') {\n    weibullInputArea.style.display = 'flex';\n    gaussianaInputArea.style.display = 'none';\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <p>\\n        Para gerar essa variavel aleatoria foi preciso calcular a CDF<sup>-1</sup> e aplica em uma variavel aleatoria uniforme entre 0 e 1. \\n        Primeiro calculei o log de x<sub>i</sub> com a fun\\xE7\\xE3o <code>\\n        -1 * Math.log(array[i])\\n        </code> em seguida coloquei o ln (x<sub>i</sub>) na func\\xE3o code <code> aux = Math.pow(lnX, 1/beta)</code> que calcula qualquer valor da raiz dada por \\u03B2 e por ultimo com o metodo <code> weibullArray.push(\\u03BB * aux) </code>.\\n\\n        <br><br>\\n        A variancia e media s\\xE3o valores muito proximos do estimado por\\xE9m com uma margem de erro minima, isso acontece pois apesar da distrubui\\xE7\\xE3o uniforme ser feita para se aproximar da real \\xE9 muito improvavel.\\n        </p>\\n        \";\n  } else {\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'flex';\n    gaussianaInputArea.style.display = 'none';\n    weibullInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <p>\\n        Usando o metodo congruencial de gera\\xE7\\xE3o de variavel aleatoria uniforme gerei uma fun\\xE7\\xE3o com os seguintes parametros: \\n        <code>\\n        seed = ((13 * seed  + c) % mod)\\n        </code> onde 13 para 'a' foi o melhor valor encontrado para evitar valores ciclicos das variaveis. A escolha aleatoria da <code>seed\\n        </code>  foi dada por uma fun\\xE7\\xE3o nativa do JavaScript. E o valor do modulo, como visto em aula, foi um valor inteiro suficientemente grande para evitar valores ciclicos e menor que 2<sup>64</sup>. O valor de 'c' tamb\\xE9m foi escolhido aleatoriamente sendo menor que o valor do modulo.\\n        <br><br>\\n        \\n        E por ultimo a fun\\xE7\\xE3o abaixo responsavel por gerar variaveis aleatorias de qualquer valor.\\n        <br>\\n        <code>\\n        emptyArray.push((( seed * range ) / mod) + initValue )\\n        </code>\\n        <br><br>\\n        A variancia e media s\\xE3o valores muito proximos do estimado por\\xE9m com uma margem de erro minima, isso acontece pois apesar da distrubui\\xE7\\xE3o uniforme ser feita para se aproximar da real \\xE9 muito improvavel\\n        </p>\\n        \";\n  }\n}\nfieldsetCheck.addEventListener('change', function (e) {\n  changeType();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///501\n")}},__webpack_module_cache__={};function __webpack_require__(F){var Q=__webpack_module_cache__[F];if(void 0!==Q)return Q.exports;var U=__webpack_module_cache__[F]={exports:{}};return __webpack_modules__[F](U,U.exports,__webpack_require__),U.exports}var __webpack_exports__=__webpack_require__(852)})();