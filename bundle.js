(()=>{var __webpack_modules__={837:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXTERNAL MODULE: ./src/js/observer.js\nvar observer = __webpack_require__(501);\n;// CONCATENATED MODULE: ./src/js/libs/gerUniformRandVariable.js\nfunction gerUniformRandVariable(emptyArray, initValue, finalValue, qtdOfVariables) {\n  var range = finalValue - initValue;\n  var seed = new Date().getMilliseconds() % range;\n  emptyArray.push(seed);\n  var a = range % 2 == 0 ? 5 : new Date().getMilliseconds();\n  for (var i = 0; i < qtdOfVariables - 1; i++) {\n    seed = (a * seed + range / qtdOfVariables) % range + initValue;\n    emptyArray.push(seed);\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerHistogram.js\nfunction gerHistogram(intervals, obj, initValue, finalValue) {\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    obj.arrayIntervals.push({\n      \"indexOfInterval\": deltaX * i + initValue,\n      \"count\": 0\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/fillHistogram.js\nfunction fillHistogram(AleatoryVar, Histogram) {\n  for (var i = 0; i < AleatoryVar.length; i++) {\n    for (var j = Histogram.arrayIntervals.length; j >= 1; j--) {\n      if (Histogram.arrayIntervals[j - 1].indexOfInterval <= AleatoryVar[i]) {\n        Histogram.arrayIntervals[j - 1].count += 1;\n        break;\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/average.js\nfunction average(randomVar) {\n  var variance = 0;\n  var sum = randomVar.reduce(function (acc, current) {\n    return acc + current;\n  }, 0);\n  var media = sum / randomVar.length;\n  randomVar.forEach(function (e) {\n    variance = variance + Math.pow(media - e, 2);\n  });\n  var averageBlock = document.getElementById('average');\n  var varianceBlock = document.getElementById('variance');\n  averageBlock.innerHTML = \"media \\xE9 \".concat((sum / randomVar.length).toFixed(3));\n  varianceBlock.innerHTML = \"a variancia \\xE9 \".concat(variance / randomVar.length);\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerCDF.js\nfunction gerCDF(AleatoryVar, cdfData, initValue, finalValue, qtdOfVariables) {\n  cdfData = [];\n  var intervals = 20;\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    cdfData.push({\n      \"indexOfInterval\": deltaX * (i + 1) + initValue,\n      \"count\": 0,\n      \"prob\": 0\n    });\n  }\n  for (i in AleatoryVar) {\n    for (var j = intervals - 1; j >= 0; j--) {\n      if (AleatoryVar[i] > cdfData[j].indexOfInterval - deltaX) {\n        cdfData[j].count++;\n        break;\n      }\n    }\n  }\n  for (i in cdfData) {\n    cdfData[i].prob = cdfData[i].count / qtdOfVariables;\n  }\n  for (var i = 1; i < cdfData.length; i++) {\n    cdfData[i].prob = cdfData[i].prob + cdfData[i - 1].prob;\n  }\n  return cdfData;\n}\n;// CONCATENATED MODULE: ./src/js/libs/printCDF.js\nfunction printCDF(probsOfCDF, valuesOfAxixsXonCDF, cdfGraphic) {\n  cdfGraphic.innerHTML = '';\n  var options2 = {\n    chart: {\n      type: 'line'\n    },\n    stroke: {\n      curve: 'straight',\n      lineCap: 'round',\n      colors: '#0Ab68b'\n    },\n    series: [{\n      name: 'probabilidade de ser menor que',\n      data: probsOfCDF\n    }],\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        gradientToColors: ['#92de8b', '#208174'],\n        shadeIntensity: 1,\n        type: 'vertical',\n        opacityFrom: 1,\n        opacityTo: 1\n      }\n    },\n    xaxis: {\n      categories: valuesOfAxixsXonCDF\n    },\n    yaxis: {\n      tickAmount: 8,\n      min: 0,\n      max: 1\n    }\n  };\n  var chart2 = new ApexCharts(cdfGraphic, options2);\n  chart2.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/printHistogram.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction printHistogram(probsOfIntervals, valuesOfAxixsX, graphicArea) {\n  var maxProb = probsOfIntervals[0];\n  graphicArea.innerHTML = '';\n  var _iterator = _createForOfIteratorHelper(probsOfIntervals),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var x = _step.value;\n      if (x > maxProb) {\n        maxProb = x;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  console.log(maxProb);\n  var options = {\n    chart: {\n      type: 'histogram'\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 3,\n        borderRadiusApplication: 'end',\n        columnWidth: '85%'\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    series: [{\n      data: probsOfIntervals\n    }],\n    xaxis: {\n      categories: valuesOfAxixsX\n    },\n    yaxis: {\n      tickAmount: 4,\n      min: 0,\n      max: maxProb * 1.2\n    },\n    colors: ['#208174', '#66DA26', '#546E7A', '#E91E63', '#FF9800']\n  };\n  var chart = new ApexCharts(graphicArea, options);\n  chart.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerExpVariable.js\n\nfunction gerExpVariable(lambda, qtdOfVariables) {\n  var a = [];\n  gerUniformRandVariable(a, 0, 1, qtdOfVariables);\n  var b = [];\n  for (var i = 0; i < qtdOfVariables; i++) {\n    b.push(-(1 / lambda * Math.log(1 - a[i])));\n  }\n  return b;\n}\n;// CONCATENATED MODULE: ./src/js/renderHistogram.js\n\n\n\n\n\n\n\n\nvar randomVariable = [];\nvar cdfData;\nvar refreshGraph = document.querySelector('#refreshGraph');\nvar histogramGraphic = document.querySelector('.graphArea');\nvar cdfGraphic = document.querySelector('.cdfGraphic');\nrenderAllGraphics();\nrefreshGraph.addEventListener('click', function (e) {\n  e.preventDefault();\n  renderAllGraphics();\n  average(randomVariable);\n});\nfunction renderAllGraphics() {\n  randomVariable = [];\n  cdfData = [];\n  var objHistogram = {\n    \"qtdOfIntervals\": 0,\n    \"arrayIntervals\": []\n  };\n  var form = document.querySelector('form.inputs');\n  var initialValue = parseFloat(form.querySelector('#initialValue').value);\n  var finalValue = parseFloat(form.querySelector('#finalValue').value);\n  var qtdOfVariables = parseFloat(form.querySelector('#qtdOfVariables').value);\n  var intervals = parseFloat(form.querySelector('#intervals').value);\n  var typeOfVariable = form.querySelector(\"input:checked\");\n  switch (typeOfVariable.value) {\n    case \"uniform\":\n      gerUniformRandVariable(randomVariable, initialValue, finalValue, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, initialValue, finalValue);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, initialValue, finalValue, qtdOfVariables);\n      break;\n    case \"exponential\":\n      var lambda = parseFloat(form.querySelector(\"#lambda\").value);\n      var finalVal = -(1 / lambda * Math.log(1 - 0.9995));\n      randomVariable = gerExpVariable(lambda, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, initialValue, finalVal);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, initialValue, finalVal, qtdOfVariables);\n      break;\n      break;\n    default:\n  }\n  var valuesOfAxixsX = [];\n  var count = [];\n  var valuesOfAxixsXonCDF = [initialValue];\n  var countOfCDF = [0];\n  setTimeout(function () {\n    objHistogram.arrayIntervals.forEach(function (e) {\n      valuesOfAxixsX.push(\"\\n      \".concat(e.indexOfInterval.toFixed(2).toString(), \" -\\n      \").concat((e.indexOfInterval + (finalValue - initialValue) / intervals).toFixed(2).toString()));\n      count.push(e.count / qtdOfVariables);\n    });\n    cdfData.forEach(function (e) {\n      valuesOfAxixsXonCDF.push(\"\\n      \".concat(e.indexOfInterval.toFixed(2)));\n      countOfCDF.push(e.prob.toFixed(4));\n    });\n    printHistogram(count, valuesOfAxixsX, histogramGraphic);\n    printCDF(countOfCDF, valuesOfAxixsXonCDF, cdfGraphic);\n  }, 0);\n}\n;// CONCATENATED MODULE: ./src/js/index.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///837\n")},501:()=>{eval("var fieldSetCheck = document.querySelector('fieldset');\nvar changeFormArea = document.querySelector('.changeFormArea');\nchangeType();\nfunction changeType() {\n  var typOfVariable = fieldSetCheck.querySelector('input:checked');\n  if (typOfVariable.value == 'exponential') {\n    changeFormArea.innerHTML += \"\\n        <label for=\\\"lambda\\\">Valor de \\u03BB</label>\\n        <input type=\\\"number\\\" id=\\\"lambda\\\" value=\\\"3\\\">\\n        \";\n  } else {\n    changeFormArea.innerHTML = '';\n  }\n}\nfieldSetCheck.addEventListener('change', function (e) {\n  changeType();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAxLmpzIiwibmFtZXMiOlsiZmllbGRTZXRDaGVjayIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNoYW5nZUZvcm1BcmVhIiwiY2hhbmdlVHlwZSIsInR5cE9mVmFyaWFibGUiLCJ2YWx1ZSIsImlubmVySFRNTCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLy4vc3JjL2pzL29ic2VydmVyLmpzP2E1NzYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmllbGRTZXRDaGVjayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2ZpZWxkc2V0Jyk7XHJcblxyXG5jb25zdCBjaGFuZ2VGb3JtQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGFuZ2VGb3JtQXJlYScpO1xyXG5cclxuY2hhbmdlVHlwZSgpO1xyXG5cclxuZnVuY3Rpb24gY2hhbmdlVHlwZSgpe1xyXG4gICAgY29uc3QgdHlwT2ZWYXJpYWJsZSA9IGZpZWxkU2V0Q2hlY2sucXVlcnlTZWxlY3RvcignaW5wdXQ6Y2hlY2tlZCcpO1xyXG4gICAgaWYgKHR5cE9mVmFyaWFibGUudmFsdWUgPT0gJ2V4cG9uZW50aWFsJyl7XHJcbiAgICAgICAgY2hhbmdlRm9ybUFyZWEuaW5uZXJIVE1MICs9IGBcclxuICAgICAgICA8bGFiZWwgZm9yPVwibGFtYmRhXCI+VmFsb3IgZGUgzrs8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJsYW1iZGFcIiB2YWx1ZT1cIjNcIj5cclxuICAgICAgICBgXHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBjaGFuZ2VGb3JtQXJlYS5pbm5lckhUTUwgPSAnJztcclxuICAgIH0gXHJcbn1cclxuXHJcbmZpZWxkU2V0Q2hlY2suYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpPT57XHJcbiAgICBjaGFuZ2VUeXBlKClcclxufSk7XHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsVUFBVSxDQUFDO0FBRXhELElBQU1DLGNBQWMsR0FBR0YsUUFBUSxDQUFDQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7QUFFaEVFLFVBQVUsRUFBRTtBQUVaLFNBQVNBLFVBQVUsR0FBRTtFQUNqQixJQUFNQyxhQUFhLEdBQUdMLGFBQWEsQ0FBQ0UsYUFBYSxDQUFDLGVBQWUsQ0FBQztFQUNsRSxJQUFJRyxhQUFhLENBQUNDLEtBQUssSUFBSSxhQUFhLEVBQUM7SUFDckNILGNBQWMsQ0FBQ0ksU0FBUyxrSUFHdkI7RUFDTCxDQUFDLE1BQUk7SUFDREosY0FBYyxDQUFDSSxTQUFTLEdBQUcsRUFBRTtFQUNqQztBQUNKO0FBRUFQLGFBQWEsQ0FBQ1EsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQUNDLENBQUMsRUFBRztFQUMxQ0wsVUFBVSxFQUFFO0FBQ2hCLENBQUMsQ0FBQyJ9\n//# sourceURL=webpack-internal:///501\n")}},__webpack_module_cache__={};function __webpack_require__(F){var Q=__webpack_module_cache__[F];if(void 0!==Q)return Q.exports;var U=__webpack_module_cache__[F]={exports:{}};return __webpack_modules__[F](U,U.exports,__webpack_require__),U.exports}var __webpack_exports__=__webpack_require__(837)})();