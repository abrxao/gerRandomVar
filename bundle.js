(()=>{"use strict";var __webpack_modules__={843:()=>{eval("\n;// CONCATENATED MODULE: ./src/js/libs/gerUniformRandVariable.js\nfunction gerUniformRandVariable(emptyArray, initValue, finalValue, qtdOfVariables) {\n  var range = finalValue - initValue;\n  var seed = new Date().getMilliseconds() % range;\n  emptyArray.push(seed);\n  console.log(range);\n  var a = range % 2 == 0 ? 5 : new Date().getMilliseconds();\n  for (var i = 0; i < qtdOfVariables - 1; i++) {\n    seed = (a * seed + range / qtdOfVariables) % range + initValue;\n    emptyArray.push(seed);\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerHistogram.js\nfunction gerHistogram(intervals, obj, initValue, finalValue) {\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    obj.arrayIntervals.push({\n      \"indexOfInterval\": deltaX * i + initValue,\n      \"count\": 0\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/fillHistogram.js\nfunction fillHistogram(AleatoryVar, Histogram) {\n  for (var i = 0; i < AleatoryVar.length; i++) {\n    for (var j = Histogram.arrayIntervals.length; j >= 1; j--) {\n      if (Histogram.arrayIntervals[j - 1].indexOfInterval <= AleatoryVar[i]) {\n        Histogram.arrayIntervals[j - 1].count++;\n        console.table(AleatoryVar[i], i, j - 1);\n        break;\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/js/printHistogram.js\n\n\n\nvar refreshGraph = document.querySelector('#refreshGraph');\nvar graph = document.querySelector('.graphArea');\nvar printHistogram_form = document.querySelector('form.inputs');\nrefreshGraph.addEventListener('click', function (e) {\n  e.preventDefault();\n  var initialValue = parseFloat(printHistogram_form.querySelector('#initialValue').value);\n  var finalValue = parseFloat(printHistogram_form.querySelector('#finalValue').value);\n  var qtdOfVariables = parseFloat(printHistogram_form.querySelector('#qtdOfVariables').value);\n  var intervals = parseFloat(printHistogram_form.querySelector('#intervals').value);\n  var uniformRandVariable = [];\n  var objHistogram = {\n    \"qtdOfIntervals\": 0,\n    \"arrayIntervals\": []\n  };\n  gerUniformRandVariable(uniformRandVariable, initialValue, finalValue, qtdOfVariables);\n  gerHistogram(intervals, objHistogram, initialValue, finalValue);\n  fillHistogram(uniformRandVariable, objHistogram);\n  var xaxis2 = [];\n  var count = [];\n  objHistogram.arrayIntervals.forEach(function (e) {\n    xaxis2.push(\"\\n    \".concat(e.indexOfInterval.toFixed(2).toString(), \" -\\n    \").concat((e.indexOfInterval + (finalValue - initialValue) / intervals).toFixed(2).toString()));\n    count.push(e.count / qtdOfVariables);\n  });\n  var options = {\n    chart: {\n      type: 'histogram'\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 3,\n        borderRadiusApplication: 'end',\n        columnWidth: '95%'\n      }\n    },\n    series: [{\n      data: count\n    }],\n    xaxis: {\n      categories: xaxis2\n    },\n    yaxis: {\n      tickAmount: 8,\n      min: 0,\n      max: 1\n    },\n    colors: ['#208174', '#66DA26', '#546E7A', '#E91E63', '#FF9800']\n  };\n  setTimeout(function () {\n    graph.innerHTML = '';\n    var chart = new ApexCharts(graph, options);\n    chart.render();\n  }, 0);\n});\n;// CONCATENATED MODULE: ./src/js/index.js\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///843\n")}},__webpack_exports__={};__webpack_modules__[843]()})();