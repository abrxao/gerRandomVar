(()=>{var __webpack_modules__={161:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./src/js/observer.js\nvar observer = __webpack_require__(501);\n;// CONCATENATED MODULE: ./src/js/libs/gerUniformRandVariable.js\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\nfunction gerUniformRandVariable(emptyArray, initValue, finalValue, qtdOfVariables) {\n  var range = finalValue - initValue;\n  var mod = 10000000000;\n  var seed = getRandomInt(0, mod);\n  var a = getRandomInt(0, mod - 100);\n  var c = getRandomInt(0, mod - 10000);\n  for (var i = 0; i < qtdOfVariables; i++) {\n    seed = (a * seed + c) % mod;\n    emptyArray.push(seed * range / mod + initValue);\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerHistogram.js\nfunction gerHistogram(intervals, obj, initValue, finalValue) {\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    obj.arrayIntervals.push({\n      "indexOfInterval": deltaX * i + initValue,\n      "count": 0\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/fillHistogram.js\nfunction fillHistogram(AleatoryVar, Histogram) {\n  for (var i = 0; i < AleatoryVar.length; i++) {\n    for (var j = Histogram.arrayIntervals.length; j >= 1; j--) {\n      if (Histogram.arrayIntervals[j - 1].indexOfInterval <= AleatoryVar[i]) {\n        Histogram.arrayIntervals[j - 1].count += 1;\n        break;\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/average.js\nfunction average(randomVar) {\n  var variance = 0;\n  var sum = randomVar.reduce(function (acc, current) {\n    return acc + current;\n  }, 0);\n  var media = sum / randomVar.length;\n  randomVar.forEach(function (e) {\n    variance = variance + Math.pow(media - e, 2);\n  });\n  var averageBlock = document.querySelector(\'.average\');\n  var varianceBlock = document.querySelector(\'.variance\');\n  averageBlock.innerHTML = "media \\xE9 ".concat((sum / randomVar.length).toFixed(3));\n  varianceBlock.innerHTML = "a variancia \\xE9 ".concat(variance / randomVar.length);\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerCDF.js\nfunction gerCDF(AleatoryVar, cdfData, initValue, finalValue, qtdOfVariables) {\n  cdfData = [];\n  var intervals = 100;\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    cdfData.push({\n      "indexOfInterval": deltaX * (i + 1) + initValue,\n      "count": 0,\n      "prob": 0\n    });\n  }\n  for (i in AleatoryVar) {\n    for (var j = intervals - 1; j >= 0; j--) {\n      if (AleatoryVar[i] > cdfData[j].indexOfInterval - deltaX) {\n        cdfData[j].count++;\n        break;\n      }\n    }\n  }\n  for (i in cdfData) {\n    cdfData[i].prob = cdfData[i].count / qtdOfVariables;\n  }\n  for (var i = 1; i < cdfData.length; i++) {\n    cdfData[i].prob = cdfData[i].prob + cdfData[i - 1].prob;\n  }\n  return cdfData;\n}\n;// CONCATENATED MODULE: ./src/js/libs/printCDF.js\nfunction printCDF(probsOfCDF, valuesOfAxixsXonCDF, cdfGraphic) {\n  cdfGraphic.innerHTML = \'\';\n  var options2 = {\n    chart: {\n      type: \'line\',\n      redrawOnWindowResize: false\n    },\n    stroke: {\n      curve: \'straight\',\n      lineCap: \'round\',\n      colors: \'#0Ab68b\'\n    },\n    series: [{\n      name: \'probabilidade de ser menor que\',\n      data: probsOfCDF\n    }],\n    fill: {\n      type: \'gradient\',\n      gradient: {\n        shade: \'dark\',\n        gradientToColors: [\'#92de8b\', \'#208174\'],\n        shadeIntensity: 1,\n        type: \'vertical\',\n        opacityFrom: 1,\n        opacityTo: 1\n      }\n    },\n    xaxis: {\n      categories: valuesOfAxixsXonCDF\n    },\n    yaxis: {\n      tickAmount: 8,\n      min: 0,\n      max: 1\n    }\n  };\n  var chart2 = new ApexCharts(cdfGraphic, options2);\n  chart2.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/printHistogram.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction printHistogram(probsOfIntervals, valuesOfAxixsX, graphicArea) {\n  var maxProb = probsOfIntervals[0];\n  graphicArea.innerHTML = \'\';\n  var _iterator = _createForOfIteratorHelper(probsOfIntervals),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var x = _step.value;\n      if (x > maxProb) {\n        maxProb = x;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var options = {\n    chart: {\n      type: \'histogram\',\n      redrawOnParentResize: false\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 3,\n        borderRadiusApplication: \'end\',\n        columnWidth: \'85%\'\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    series: [{\n      data: probsOfIntervals\n    }],\n    xaxis: {\n      categories: valuesOfAxixsX\n    },\n    yaxis: {\n      tickAmount: 4,\n      min: 0,\n      max: maxProb * 1.2\n    },\n    colors: [\'#208174\', \'#66DA26\', \'#546E7A\', \'#E91E63\', \'#FF9800\']\n  };\n  var chart = new ApexCharts(graphicArea, options);\n  chart.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerExpVariable.js\n\nfunction gerExpVariable(lambda, qtdOfVariables) {\n  var a = [];\n  gerUniformRandVariable(a, 0, 1, qtdOfVariables);\n  var b = [];\n  for (var i = 0; i < qtdOfVariables; i++) {\n    b.push(-(1 / lambda * Math.log(1 - a[i])));\n  }\n  return b;\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerGausVariable.js\n\n\nfunction gerGausVariable(average, variance, qtdOfVariables) {\n  var a = [];\n  var b = [];\n  var c = [];\n  var aux = 0;\n  for (var i = 0; i < 12; i++) {\n    b = [];\n    gerUniformRandVariable(b, 0, 1, qtdOfVariables);\n    a.push(b);\n  }\n  for (var j = 0; j < qtdOfVariables; j++) {\n    aux = 0;\n    for (var i = 0; i < 12; i++) {\n      aux += a[i][j];\n    }\n    c.push(aux - 6);\n  }\n  var max = c[0];\n  var min = c[0];\n  for (var i = 0; i < qtdOfVariables; i++) {\n    c[i] = average + c[i] * Math.sqrt(variance);\n    if (c[i] > max) {\n      max = c[i];\n    } else if (c[i] < min) {\n      min = c[i];\n    }\n  }\n  return {\n    "array": c,\n    "maxValue": max,\n    "minValue": min\n  };\n}\n;// CONCATENATED MODULE: ./src/js/renderHistogram.js\n\n\n\n\n\n\n\n\n\ngerGausVariable();\nvar randomVariable = [];\nvar cdfData;\nvar refreshGraph = document.querySelector(\'#refreshGraph\');\nvar histogramGraphic = document.querySelector(\'.graphArea\');\nvar cdfGraphic = document.querySelector(\'.cdfGraphic\');\nrenderAllGraphics();\nrefreshGraph.addEventListener(\'click\', function (e) {\n  e.preventDefault();\n  renderAllGraphics();\n  average(randomVariable);\n});\nfunction renderAllGraphics() {\n  randomVariable = [];\n  cdfData = [];\n  var objHistogram = {\n    "qtdOfIntervals": 0,\n    "arrayIntervals": []\n  };\n  var form = document.querySelector(\'form.inputs\');\n  var initialValue = parseFloat(form.querySelector(\'#initialValue\').value);\n  var finalValue = parseFloat(form.querySelector(\'#finalValue\').value);\n  var qtdOfVariables = parseFloat(form.querySelector(\'#qtdOfVariables\').value);\n  var intervals = parseFloat(form.querySelector(\'#intervals\').value);\n  var typeOfVariable = form.querySelector("input:checked");\n  switch (typeOfVariable.value) {\n    case "uniform":\n      gerUniformRandVariable(randomVariable, initialValue, finalValue, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, initialValue, finalValue);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, initialValue, finalValue, qtdOfVariables);\n      break;\n    case "exponential":\n      var lambda = parseFloat(form.querySelector("#lambda").value);\n      var finalVal = -(1 / lambda * Math.log(1 - 0.99954));\n      randomVariable = gerExpVariable(lambda, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, 0, finalVal);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, 0, finalVal, qtdOfVariables);\n      break;\n    case "gaussiana":\n      var variance2 = parseFloat(form.querySelector("#variance").value);\n      var average2 = parseFloat(form.querySelector("#average").value);\n      var aux = gerGausVariable(average2, variance2, qtdOfVariables);\n      randomVariable = aux.array;\n      gerHistogram(intervals, objHistogram, aux.minValue, aux.maxValue);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, aux.minValue, aux.maxValue, qtdOfVariables);\n      break;\n    default:\n  }\n  var valuesOfAxixsX = [];\n  var count = [];\n  var valuesOfAxixsXonCDF = [initialValue];\n  var countOfCDF = [0];\n  setTimeout(function () {\n    objHistogram.arrayIntervals.forEach(function (e) {\n      valuesOfAxixsX.push("\\n      ".concat(e.indexOfInterval.toFixed(2).toString(), " -\\n      ").concat((e.indexOfInterval + (finalValue - initialValue) / intervals).toFixed(2).toString()));\n      count.push(e.count / qtdOfVariables);\n    });\n    cdfData.forEach(function (e) {\n      valuesOfAxixsXonCDF.push("\\n      ".concat(e.indexOfInterval.toFixed(2)));\n      countOfCDF.push(e.prob.toFixed(4));\n    });\n    printHistogram(count, valuesOfAxixsX, histogramGraphic);\n    printCDF(countOfCDF, valuesOfAxixsXonCDF, cdfGraphic);\n  }, 0);\n}\n;// CONCATENATED MODULE: ./src/js/index.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///161\n')},501:()=>{eval("var fieldSetCheck = document.querySelector('fieldset');\nvar gaussianaInputArea = document.querySelector('.gaussianaInputArea');\nvar uniformInputArea = document.querySelector('.uniformInputArea');\nvar exponentialInputArea = document.querySelector('.exponentialInputArea');\nchangeType();\nfunction changeType() {\n  gaussianaInputArea.style.display = 'none';\n  var typOfVariable = fieldSetCheck.querySelector('input:checked');\n  if (typOfVariable.value == 'exponential') {\n    exponentialInputArea.style.display = 'flex';\n    uniformInputArea.style.display = 'none';\n    gaussianaInputArea.style.display = 'none';\n  } else if (typOfVariable.value == 'gaussiana') {\n    gaussianaInputArea.style.display = 'flex';\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'none';\n  } else {\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'flex';\n    gaussianaInputArea.style.display = 'none';\n  }\n}\nfieldSetCheck.addEventListener('change', function (e) {\n  changeType();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAxLmpzIiwibmFtZXMiOlsiZmllbGRTZXRDaGVjayIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImdhdXNzaWFuYUlucHV0QXJlYSIsInVuaWZvcm1JbnB1dEFyZWEiLCJleHBvbmVudGlhbElucHV0QXJlYSIsImNoYW5nZVR5cGUiLCJzdHlsZSIsImRpc3BsYXkiLCJ0eXBPZlZhcmlhYmxlIiwidmFsdWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZSJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay8uL3NyYy9qcy9vYnNlcnZlci5qcz9hNTc2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZpZWxkU2V0Q2hlY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmaWVsZHNldCcpO1xyXG5jb25zdCBnYXVzc2lhbmFJbnB1dEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2F1c3NpYW5hSW5wdXRBcmVhJyk7XHJcbmNvbnN0IHVuaWZvcm1JbnB1dEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudW5pZm9ybUlucHV0QXJlYScpXHJcbmNvbnN0IGV4cG9uZW50aWFsSW5wdXRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmV4cG9uZW50aWFsSW5wdXRBcmVhJyk7XHJcblxyXG5jaGFuZ2VUeXBlKCk7XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VUeXBlKCl7XHJcbiAgICBnYXVzc2lhbmFJbnB1dEFyZWEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGNvbnN0IHR5cE9mVmFyaWFibGUgPSBmaWVsZFNldENoZWNrLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0OmNoZWNrZWQnKTtcclxuICAgIGlmICh0eXBPZlZhcmlhYmxlLnZhbHVlID09ICdleHBvbmVudGlhbCcpe1xyXG4gICAgICAgIGV4cG9uZW50aWFsSW5wdXRBcmVhLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgdW5pZm9ybUlucHV0QXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIGdhdXNzaWFuYUlucHV0QXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgIH1lbHNlIGlmKHR5cE9mVmFyaWFibGUudmFsdWUgPT0gJ2dhdXNzaWFuYScpe1xyXG4gICAgICAgIGdhdXNzaWFuYUlucHV0QXJlYS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIGV4cG9uZW50aWFsSW5wdXRBcmVhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdW5pZm9ybUlucHV0QXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICBleHBvbmVudGlhbElucHV0QXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHVuaWZvcm1JbnB1dEFyZWEuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICBnYXVzc2lhbmFJbnB1dEFyZWEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH0gXHJcbn1cclxuXHJcbmZpZWxkU2V0Q2hlY2suYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpPT57XHJcbiAgICBjaGFuZ2VUeXBlKClcclxufSk7XHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsVUFBVSxDQUFDO0FBQ3hELElBQU1DLGtCQUFrQixHQUFHRixRQUFRLENBQUNDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQztBQUN4RSxJQUFNRSxnQkFBZ0IsR0FBR0gsUUFBUSxDQUFDQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7QUFDcEUsSUFBTUcsb0JBQW9CLEdBQUdKLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLHVCQUF1QixDQUFDO0FBRTVFSSxVQUFVLEVBQUU7QUFFWixTQUFTQSxVQUFVLEdBQUU7RUFDakJILGtCQUFrQixDQUFDSSxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQ3pDLElBQU1DLGFBQWEsR0FBR1QsYUFBYSxDQUFDRSxhQUFhLENBQUMsZUFBZSxDQUFDO0VBQ2xFLElBQUlPLGFBQWEsQ0FBQ0MsS0FBSyxJQUFJLGFBQWEsRUFBQztJQUNyQ0wsb0JBQW9CLENBQUNFLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07SUFDM0NKLGdCQUFnQixDQUFDRyxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0lBQ3ZDTCxrQkFBa0IsQ0FBQ0ksS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUU3QyxDQUFDLE1BQUssSUFBR0MsYUFBYSxDQUFDQyxLQUFLLElBQUksV0FBVyxFQUFDO0lBQ3hDUCxrQkFBa0IsQ0FBQ0ksS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtJQUN6Q0gsb0JBQW9CLENBQUNFLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07SUFDM0NKLGdCQUFnQixDQUFDRyxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQzNDLENBQUMsTUFDRztJQUNBSCxvQkFBb0IsQ0FBQ0UsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtJQUMzQ0osZ0JBQWdCLENBQUNHLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07SUFDdkNMLGtCQUFrQixDQUFDSSxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQzdDO0FBQ0o7QUFFQVIsYUFBYSxDQUFDVyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsVUFBQ0MsQ0FBQyxFQUFHO0VBQzFDTixVQUFVLEVBQUU7QUFDaEIsQ0FBQyxDQUFDIn0=\n//# sourceURL=webpack-internal:///501\n")}},__webpack_module_cache__={};function __webpack_require__(F){var Q=__webpack_module_cache__[F];if(void 0!==Q)return Q.exports;var U=__webpack_module_cache__[F]={exports:{}};return __webpack_modules__[F](U,U.exports,__webpack_require__),U.exports}var __webpack_exports__=__webpack_require__(161)})();