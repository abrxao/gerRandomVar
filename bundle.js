(()=>{var __webpack_modules__={852:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXTERNAL MODULE: ./src/js/observer.js\nvar observer = __webpack_require__(501);\n;// CONCATENATED MODULE: ./src/js/libs/gerUniformRandVariable.js\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\nfunction gerUniformRandVariable(emptyArray, initValue, finalValue, qtdOfVariables) {\n  var range = finalValue - initValue;\n  var mod = 10000000000;\n  var seed = getRandomInt(0, mod);\n  var c = getRandomInt(0, 1000000);\n  emptyArray.push(seed * range / mod + initValue);\n  for (var i = 0; i < qtdOfVariables - 1; i++) {\n    seed = (13 * seed + c) % mod;\n    emptyArray.push(seed * range / mod + initValue);\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerHistogram.js\nfunction gerHistogram(intervals, obj, initValue, finalValue) {\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    obj.arrayIntervals.push({\n      \"indexOfInterval\": deltaX * i + initValue,\n      \"count\": 0\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/fillHistogram.js\nfunction fillHistogram(AleatoryVar, Histogram) {\n  for (var i = 0; i < AleatoryVar.length; i++) {\n    for (var j = Histogram.arrayIntervals.length; j >= 1; j--) {\n      if (Histogram.arrayIntervals[j - 1].indexOfInterval <= AleatoryVar[i]) {\n        Histogram.arrayIntervals[j - 1].count += 1;\n        break;\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/average.js\nfunction average(randomVar) {\n  var variance = 0;\n  var sum = randomVar.reduce(function (acc, current) {\n    return acc + current;\n  }, 0);\n  var media = sum / randomVar.length;\n  randomVar.forEach(function (e) {\n    variance = variance + Math.pow(media - e, 2);\n  });\n  var averageBlock = document.querySelector('.average');\n  var varianceBlock = document.querySelector('.variance');\n  averageBlock.innerHTML = \"\\n    <p> Media <br> <strong>\".concat((sum / randomVar.length).toFixed(3).toString().replace(\".\", \",\"), \"</strong></p>\");\n  varianceBlock.innerHTML = \"<p> Variancia<br> <strong>\".concat((variance / randomVar.length).toFixed(3).toString().replace(\".\", \",\"), \"</strong></p>\");\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerCDF.js\nfunction gerCDF(AleatoryVar, cdfData, initValue, finalValue, qtdOfVariables) {\n  cdfData = [];\n  var intervals = 200;\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    cdfData.push({\n      \"indexOfInterval\": deltaX * (i + 1) + initValue,\n      \"count\": 0,\n      \"prob\": 0\n    });\n  }\n  for (i in AleatoryVar) {\n    for (var j = intervals - 1; j >= 0; j--) {\n      if (AleatoryVar[i] > cdfData[j].indexOfInterval - deltaX) {\n        cdfData[j].count++;\n        break;\n      }\n    }\n  }\n  for (i in cdfData) {\n    cdfData[i].prob = cdfData[i].count / qtdOfVariables;\n  }\n  for (var i = 1; i < cdfData.length; i++) {\n    cdfData[i].prob = cdfData[i].prob + cdfData[i - 1].prob;\n  }\n  return cdfData;\n}\n;// CONCATENATED MODULE: ./src/js/libs/printCDF.js\nfunction printCDF(probsOfCDF, valuesOfAxixsXonCDF, cdfGraphic) {\n  cdfGraphic.innerHTML = '';\n  var options2 = {\n    chart: {\n      type: 'line',\n      height: window.innerWidth < 768 ? '300' : 'auto'\n    },\n    title: {\n      text: 'Cumulativa de probabilidade',\n      align: 'center',\n      margin: 10,\n      floating: false,\n      style: {\n        fontSize: '20px',\n        fontWeight: 'bold',\n        fontFamily: 'Raleway',\n        color: '#e9eef4'\n      }\n    },\n    stroke: {\n      curve: 'straight',\n      lineCap: 'round',\n      colors: '#dd9f82'\n    },\n    series: [{\n      name: 'Probabilidade',\n      data: probsOfCDF\n    }],\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        gradientToColors: ['#e65c4f'],\n        shadeIntensity: 1,\n        type: 'vertical',\n        opacityFrom: 1,\n        opacityTo: 1\n      }\n    },\n    xaxis: {\n      type: 'probabilidade de ser menor que',\n      tickAmount: window.innerWidth < 768 ? 8 : 12,\n      categories: valuesOfAxixsXonCDF,\n      labels: {\n        style: {\n          colors: '#e9eef4'\n        }\n      }\n    },\n    yaxis: {\n      tickAmount: 8,\n      min: 0,\n      max: 1,\n      labels: {\n        style: {\n          colors: '#e9eef4'\n        }\n      }\n    }\n  };\n  var chart2 = new ApexCharts(cdfGraphic, options2);\n  chart2.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/printHistogram.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction printHistogram(probsOfIntervals, valuesOfAxixsX, graphicArea) {\n  var maxProb = probsOfIntervals[0];\n  graphicArea.innerHTML = '';\n  var _iterator = _createForOfIteratorHelper(probsOfIntervals),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var x = _step.value;\n      if (x > maxProb) {\n        maxProb = x;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var options = {\n    chart: {\n      type: 'histogram',\n      height: window.innerWidth < 768 ? '300' : 'auto'\n    },\n    title: {\n      text: 'Densidade de probabilidade',\n      align: 'center',\n      margin: 10,\n      floating: false,\n      style: {\n        fontSize: '20px',\n        fontWeight: 'bold',\n        fontFamily: 'Raleway',\n        color: '#e9eef4'\n      }\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 3,\n        borderRadiusApplication: 'end',\n        columnWidth: '85%'\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    series: [{\n      name: 'Probabilidade',\n      data: probsOfIntervals\n    }],\n    xaxis: {\n      tickAmount: window.innerWidth < 768 ? 6 : 10,\n      categories: valuesOfAxixsX,\n      labels: {\n        style: {\n          colors: '#e9eef4'\n        }\n      }\n    },\n    yaxis: {\n      tickAmount: 4,\n      min: 0,\n      max: maxProb * 1.1,\n      labels: {\n        style: {\n          colors: '#e9eef4'\n        }\n      }\n    },\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        gradientToColors: ['#e65c4f'],\n        shadeIntensity: 1,\n        type: 'vertical',\n        opacityFrom: 1,\n        opacityTo: 1\n      }\n    },\n    colors: '#dd9f82'\n  };\n  var chart = new ApexCharts(graphicArea, options);\n  chart.render();\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerExpVariable.js\n\nfunction gerExpVariable(lambda, qtdOfVariables) {\n  var a = [];\n  gerUniformRandVariable(a, 0, 1, qtdOfVariables);\n  var expArray = [];\n  for (var i = 0; i < qtdOfVariables; i++) {\n    expArray.push(-(1 / lambda * Math.log(1 - a[i])));\n  }\n  return expArray;\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerGausVariable.js\n\n\nfunction gerGausVariable(average, variance, qtdOfVariables) {\n  var a = [];\n  var b = [];\n  var gaus = [];\n  var aux = 0;\n  for (var i = 0; i < 12; i++) {\n    b = [];\n    gerUniformRandVariable(b, 0, 1, qtdOfVariables);\n    a.push(b);\n  }\n  for (var j = 0; j < qtdOfVariables; j++) {\n    aux = 0;\n    for (var i = 0; i < 12; i++) {\n      aux += a[i][j];\n    }\n    gaus.push(aux - 6);\n  }\n  var max = gaus[0];\n  var min = gaus[0];\n  for (var i = 0; i < qtdOfVariables; i++) {\n    gaus[i] = average + gaus[i] * Math.sqrt(variance);\n    if (gaus[i] > max) {\n      max = gaus[i];\n    } else if (gaus[i] < min) {\n      min = gaus[i];\n    }\n  }\n  return {\n    \"array\": gaus,\n    \"maxValue\": max,\n    \"minValue\": min\n  };\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerWeibullVariable.js\n\nfunction gerWeibullVariable(weibullArray, lambda, beta, qtdOfVariables) {\n  var array = [];\n  gerUniformRandVariable(array, 0, 1, qtdOfVariables);\n  var max = -10000000;\n  var min = 10000000;\n  if (beta < 0 || lambda < 0) {\n    alert(\"Entre com valores maiores que 0\");\n  } else {\n    var max = [];\n    var lnX = 0;\n    for (var i = 0; i < qtdOfVariables; i++) {\n      lnX = -1 * Math.log(array[i]);\n      var aux = Math.pow(lnX, 1 / beta);\n      //var aux = Math.pow(Math.log(array[i]), 1/beta);\n      weibullArray.push(lambda * aux);\n      if (weibullArray[i] > max) {\n        max = weibullArray[i];\n      } else if (weibullArray[i] < min) {\n        min = weibullArray[i];\n      }\n    }\n  }\n  return {\n    \"min\": min,\n    \"max\": max\n  };\n}\n;// CONCATENATED MODULE: ./src/js/renderHistogram.js\n\n\n\n\n\n\n\n\n\n\nvar randomVariable = [];\nvar cdfData;\nvar refreshGraph = document.querySelector('#refreshGraph');\nvar histogramGraphic = document.querySelector('.graphArea');\nvar cdfGraphic = document.querySelector('.cdfGraphic');\nif (renderAllGraphics()) {\n  average(randomVariable);\n}\n;\nrefreshGraph.addEventListener('click', function (e) {\n  e.preventDefault();\n  renderAllGraphics();\n  average(randomVariable);\n});\nfunction renderAllGraphics() {\n  randomVariable = [];\n  cdfData = [];\n  var objHistogram = {\n    \"qtdOfIntervals\": 0,\n    \"arrayIntervals\": []\n  };\n  var valuesOfAxixsXonCDF = [];\n  var form = document.querySelector('form');\n  var initialValue = parseFloat(form.querySelector('#initialValue').value);\n  var finalValue = parseFloat(form.querySelector('#finalValue').value);\n  var qtdOfVariables = parseFloat(form.querySelector('#qtdOfVariables').value);\n  var intervals = parseFloat(form.querySelector('#intervals').value);\n  var typeOfVariable = form.querySelector(\"input:checked\");\n  switch (typeOfVariable.value) {\n    case \"uniform\":\n      gerUniformRandVariable(randomVariable, initialValue, finalValue, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, initialValue, finalValue);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, initialValue, finalValue, qtdOfVariables);\n      valuesOfAxixsXonCDF = [initialValue];\n      break;\n    case \"weibull\":\n      var lambdaW = parseFloat(document.querySelector('#lambdaW').value);\n      var betaW = parseFloat(document.querySelector('#betaW').value);\n      var minMax = gerWeibullVariable(randomVariable, lambdaW, betaW, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, minMax.min * 0.40, minMax.max);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, minMax.min * 0.98, minMax.max * 1.01, qtdOfVariables);\n      valuesOfAxixsXonCDF = [minMax.min * 0.98];\n      break;\n    case \"exponential\":\n      var lambda = parseFloat(form.querySelector(\"#lambda\").value);\n      var finalVal = -(1 / lambda * Math.log(1 - 0.99954));\n      randomVariable = gerExpVariable(lambda, qtdOfVariables);\n      gerHistogram(intervals, objHistogram, 0, finalVal);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, 0, finalVal, qtdOfVariables);\n      valuesOfAxixsXonCDF = [0];\n      break;\n    case \"gaussiana\":\n      var variance2 = parseFloat(form.querySelector(\"#variance\").value);\n      var average2 = parseFloat(form.querySelector(\"#average\").value);\n      var aux = gerGausVariable(average2, variance2, qtdOfVariables);\n      randomVariable = aux.array;\n      gerHistogram(intervals, objHistogram, aux.minValue, aux.maxValue);\n      fillHistogram(randomVariable, objHistogram);\n      cdfData = gerCDF(randomVariable, cdfData, aux.minValue, aux.maxValue, qtdOfVariables);\n      valuesOfAxixsXonCDF = [aux.minValue];\n      break;\n    default:\n      return true;\n  }\n  setTimeout(function () {\n    var valuesOfAxixsX = [];\n    var count = [];\n    var countOfCDF = [0];\n    objHistogram.arrayIntervals.forEach(function (e) {\n      valuesOfAxixsX.push(\"\\n      \".concat(e.indexOfInterval.toFixed(2).toString(), \" -\\n      \").concat((e.indexOfInterval + (finalValue - initialValue) / intervals).toFixed(2).toString()));\n      count.push(e.count / qtdOfVariables);\n    });\n    cdfData.forEach(function (e) {\n      valuesOfAxixsXonCDF.push(\"\\n      \".concat(e.indexOfInterval.toFixed(2)));\n      countOfCDF.push(e.prob.toFixed(4));\n    });\n    printHistogram(count, valuesOfAxixsX, histogramGraphic);\n    printCDF(countOfCDF, valuesOfAxixsXonCDF, cdfGraphic);\n    console.log(cdfData.indexOfIntervals);\n  }, 0);\n  return true;\n}\n;// CONCATENATED MODULE: ./src/js/index.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDO0lBRUZnRCxjQUFjLENBQUNqRSxLQUFLLEVBQUVtRSxjQUFjLEVBQUU4QixnQkFBZ0IsQ0FBQztJQUV2RDFFLFFBQVEsQ0FBQzZGLFVBQVUsRUFBQzNGLG1CQUFtQixFQUFDQyxVQUFVLENBQUM7SUFFbkQyRixPQUFPLENBQUNsQyxHQUFHLENBQUM5RCxPQUFPLENBQUNpRyxnQkFBZ0IsQ0FBQztFQUV2QyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0VBRUosT0FBTyxJQUFJO0FBRWIsQzs7QUNoSTRCO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLy4vc3JjL2pzL2xpYnMvZ2VyVW5pZm9ybVJhbmRWYXJpYWJsZS5qcz8yYzc5Iiwid2VicGFjazovL3dlYnBhY2svLi9zcmMvanMvbGlicy9nZXJIaXN0b2dyYW0uanM/MTQ2OSIsIndlYnBhY2s6Ly93ZWJwYWNrLy4vc3JjL2pzL2xpYnMvZmlsbEhpc3RvZ3JhbS5qcz8wOWVhIiwid2VicGFjazovL3dlYnBhY2svLi9zcmMvanMvbGlicy9hdmVyYWdlLmpzPzc5ODQiLCJ3ZWJwYWNrOi8vd2VicGFjay8uL3NyYy9qcy9saWJzL2dlckNERi5qcz8xNWRhIiwid2VicGFjazovL3dlYnBhY2svLi9zcmMvanMvbGlicy9wcmludENERi5qcz80Y2VhIiwid2VicGFjazovL3dlYnBhY2svLi9zcmMvanMvbGlicy9wcmludEhpc3RvZ3JhbS5qcz84NmE0Iiwid2VicGFjazovL3dlYnBhY2svLi9zcmMvanMvbGlicy9nZXJFeHBWYXJpYWJsZS5qcz84YzU0Iiwid2VicGFjazovL3dlYnBhY2svLi9zcmMvanMvbGlicy9nZXJHYXVzVmFyaWFibGUuanM/NWE5MSIsIndlYnBhY2s6Ly93ZWJwYWNrLy4vc3JjL2pzL2xpYnMvZ2VyV2VpYnVsbFZhcmlhYmxlLmpzPzNjYjYiLCJ3ZWJwYWNrOi8vd2VicGFjay8uL3NyYy9qcy9yZW5kZXJIaXN0b2dyYW0uanM/NGQ3MSIsIndlYnBhY2s6Ly93ZWJwYWNrLy4vc3JjL2pzL2luZGV4LmpzPzdiYTUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XHJcbiAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcclxuICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXJVbmlmb3JtUmFuZFZhcmlhYmxlKGVtcHR5QXJyYXksIGluaXRWYWx1ZSwgZmluYWxWYWx1ZSwgcXRkT2ZWYXJpYWJsZXMpIHtcclxuXHJcbiAgICB2YXIgcmFuZ2UgPSBmaW5hbFZhbHVlIC0gaW5pdFZhbHVlO1xyXG4gICAgdmFyIG1vZCA9IDEwMDAwMDAwMDAwO1xyXG4gICAgdmFyIHNlZWQgPSBnZXRSYW5kb21JbnQoMCwgbW9kKTtcclxuICAgIHZhciBjID0gZ2V0UmFuZG9tSW50KDAsIDEwMDAwMDApO1xyXG5cclxuICAgIGVtcHR5QXJyYXkucHVzaCgoKHNlZWQqcmFuZ2UpL21vZCkraW5pdFZhbHVlKTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF0ZE9mVmFyaWFibGVzLTE7IGkrKykge1xyXG5cclxuICAgICAgICBzZWVkID0gKCgxMyAqIHNlZWQgICsgYykgJSBtb2QpO1xyXG5cclxuICAgICAgICBlbXB0eUFycmF5LnB1c2goKChzZWVkKnJhbmdlKS9tb2QpK2luaXRWYWx1ZSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2VySGlzdG9ncmFtKGludGVydmFscywgb2JqLCBpbml0VmFsdWUsIGZpbmFsVmFsdWUpe1xyXG4gICAgdmFyIGRlbHRhWCA9IChmaW5hbFZhbHVlIC0gaW5pdFZhbHVlKS8gaW50ZXJ2YWxzO1xyXG5cclxuICAgIGZvcih2YXIgaT0wOyBpIDwgaW50ZXJ2YWxzOyBpKyspe1xyXG4gICAgICAgIG9iai5hcnJheUludGVydmFscy5wdXNoKHtcclxuICAgICAgICAgICAgXCJpbmRleE9mSW50ZXJ2YWxcIjpkZWx0YVgqaSArIGluaXRWYWx1ZSxcclxuICAgICAgICAgICAgXCJjb3VudFwiOjBcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgICAgXHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gZmlsbEhpc3RvZ3JhbShBbGVhdG9yeVZhciwgSGlzdG9ncmFtKXtcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBBbGVhdG9yeVZhci5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgZm9yKHZhciBqID0gSGlzdG9ncmFtLmFycmF5SW50ZXJ2YWxzLmxlbmd0aDsgaj49MTsgai0tKXtcclxuICAgICAgICAgICAgaWYoSGlzdG9ncmFtLmFycmF5SW50ZXJ2YWxzW2otMV0uaW5kZXhPZkludGVydmFsIDw9IEFsZWF0b3J5VmFyW2ldKXtcclxuICAgICAgICAgICAgICAgIEhpc3RvZ3JhbS5hcnJheUludGVydmFsc1tqLTFdLmNvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBhdmVyYWdlKHJhbmRvbVZhcil7XHJcbiAgICB2YXIgdmFyaWFuY2UgPSAwO1xyXG4gICAgdmFyIHN1bSA9IHJhbmRvbVZhci5yZWR1Y2UoXHJcbiAgICAgICAgKGFjYywgY3VycmVudCkgPT4gYWNjICsgY3VycmVudCxcclxuICAgICAgICAwKTtcclxuXHJcbiAgICB2YXIgbWVkaWEgPSBzdW0vcmFuZG9tVmFyLmxlbmd0aFxyXG4gICAgcmFuZG9tVmFyLmZvckVhY2goZSA9PiB7ICAgICAgIFxyXG4gICAgICAgdmFyaWFuY2UgPSB2YXJpYW5jZSArIE1hdGgucG93KG1lZGlhIC0gZSwyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGF2ZXJhZ2VCbG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdmVyYWdlJyk7XHJcbiAgICBjb25zdCB2YXJpYW5jZUJsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZhcmlhbmNlJyk7XHJcblxyXG4gICAgYXZlcmFnZUJsb2NrLmlubmVySFRNTCA9IGBcclxuICAgIDxwPiBNZWRpYSA8YnI+IDxzdHJvbmc+JHsoc3VtL3JhbmRvbVZhci5sZW5ndGgpLnRvRml4ZWQoMykudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBcIixcIil9PC9zdHJvbmc+PC9wPmA7XHJcblxyXG4gICAgdmFyaWFuY2VCbG9jay5pbm5lckhUTUwgPSBgPHA+IFZhcmlhbmNpYTxicj4gPHN0cm9uZz4keyh2YXJpYW5jZS9yYW5kb21WYXIubGVuZ3RoKS50b0ZpeGVkKDMpLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgXCIsXCIpfTwvc3Ryb25nPjwvcD5gXHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2VyQ0RGKEFsZWF0b3J5VmFyLCBjZGZEYXRhLCBpbml0VmFsdWUsIGZpbmFsVmFsdWUsIHF0ZE9mVmFyaWFibGVzKXtcclxuICAgIGNkZkRhdGEgPSBbXTtcclxuXHJcbiAgICB2YXIgaW50ZXJ2YWxzID0gMjAwO1xyXG5cclxuICAgIHZhciBkZWx0YVggPSAoZmluYWxWYWx1ZSAtIGluaXRWYWx1ZSkvaW50ZXJ2YWxzO1xyXG4gICAgXHJcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgaW50ZXJ2YWxzOyBpKyspe1xyXG4gICAgICAgIGNkZkRhdGEucHVzaCh7XHJcbiAgICAgICAgICAgIFwiaW5kZXhPZkludGVydmFsXCI6ICgoZGVsdGFYICogKGkrMSkpICsgaW5pdFZhbHVlKSxcclxuICAgICAgICAgICAgXCJjb3VudFwiOiAwLFxyXG4gICAgICAgICAgICBcInByb2JcIjogMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBmb3IoaSBpbiBBbGVhdG9yeVZhcil7XHJcbiAgICAgICAgZm9yKHZhciBqID0gaW50ZXJ2YWxzLTE7IGogPj0gMDsgai0tKXsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoQWxlYXRvcnlWYXJbaV0gPiBjZGZEYXRhW2pdLmluZGV4T2ZJbnRlcnZhbCAtIGRlbHRhWCl7XHJcbiAgICAgICAgICAgICAgICBjZGZEYXRhW2pdLmNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoaSBpbiBjZGZEYXRhKXtcclxuXHJcbiAgICAgICAgY2RmRGF0YVtpXS5wcm9iID0gY2RmRGF0YVtpXS5jb3VudC9xdGRPZlZhcmlhYmxlcztcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIGZvcih2YXIgaSA9IDE7IGkgPCBjZGZEYXRhLmxlbmd0aDsgaSsrKSB7ICAgXHJcbiAgICAgICAgY2RmRGF0YVtpXS5wcm9iID0gY2RmRGF0YVtpXS5wcm9iICsgY2RmRGF0YVtpLTFdLnByb2I7ICAgICAgICBcclxuICAgIH0gICAgXHJcbiAgICByZXR1cm4gY2RmRGF0YTsgICAgXHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gcHJpbnRDREYocHJvYnNPZkNERiwgdmFsdWVzT2ZBeGl4c1hvbkNERiwgY2RmR3JhcGhpYyl7XHJcbiAgICBjZGZHcmFwaGljLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIHZhciBvcHRpb25zMiA9IHtcclxuICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgICAgIGhlaWdodDogd2luZG93LmlubmVyV2lkdGggPCA3NjggPyAnMzAwJzonYXV0bycgIFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgdGV4dDogJ0N1bXVsYXRpdmEgZGUgcHJvYmFiaWxpZGFkZScsXHJcbiAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICAgICAgbWFyZ2luOiAxMCxcclxuICAgICAgICAgICAgZmxvYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAgJzIwcHgnLFxyXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICAnYm9sZCcsXHJcbiAgICAgICAgICAgICAgZm9udEZhbWlseTogICdSYWxld2F5JyxcclxuICAgICAgICAgICAgICBjb2xvcjogICcjZTllZWY0J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgIGN1cnZlOiAnc3RyYWlnaHQnLFxyXG4gICAgICAgICAgICBsaW5lQ2FwOiAncm91bmQnLFxyXG4gICAgICAgICAgICBjb2xvcnM6JyNkZDlmODInXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgIG5hbWU6ICdQcm9iYWJpbGlkYWRlJyxcclxuICAgICAgICAgICAgZGF0YTogcHJvYnNPZkNERlxyXG4gICAgICAgIH1dLFxyXG4gICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2dyYWRpZW50JyxcclxuICAgICAgICAgICAgZ3JhZGllbnQ6IHtcclxuICAgICAgICAgICAgICAgIHNoYWRlOiAnZGFyaycsXHJcbiAgICAgICAgICAgICAgICBncmFkaWVudFRvQ29sb3JzOiBbJyNlNjVjNGYnXSxcclxuICAgICAgICAgICAgICAgIHNoYWRlSW50ZW5zaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eVRvOiAxLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgdHlwZTogJ3Byb2JhYmlsaWRhZGUgZGUgc2VyIG1lbm9yIHF1ZScsXHJcbiAgICAgICAgICAgIHRpY2tBbW91bnQ6IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4ID8gODoxMixcclxuICAgICAgICAgICAgY2F0ZWdvcmllczp2YWx1ZXNPZkF4aXhzWG9uQ0RGLFxyXG4gICAgICAgICAgICBsYWJlbHM6e1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgY29sb3JzOiAnI2U5ZWVmNCcgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LHlheGlzOntcclxuICAgICAgICAgICAgdGlja0Ftb3VudDogOCxcclxuICAgICAgICAgICAgbWluOjAsXHJcbiAgICAgICAgICAgIG1heDogMSxcclxuICAgICAgICAgICAgbGFiZWxzOntcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yczogJyNlOWVlZjQnICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIGNoYXJ0MiA9IG5ldyBBcGV4Q2hhcnRzKGNkZkdyYXBoaWMsIG9wdGlvbnMyKVxyXG4gICAgY2hhcnQyLnJlbmRlcigpO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBwcmludEhpc3RvZ3JhbShwcm9ic09mSW50ZXJ2YWxzLCB2YWx1ZXNPZkF4aXhzWCwgZ3JhcGhpY0FyZWEgKXtcclxuICB2YXIgbWF4UHJvYiA9IHByb2JzT2ZJbnRlcnZhbHNbMF07XHJcbiAgZ3JhcGhpY0FyZWEuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gIGZvcih2YXIgeCBvZiBwcm9ic09mSW50ZXJ2YWxzKSB7XHJcbiAgICBpZih4ID4gbWF4UHJvYikge1xyXG4gICAgICBtYXhQcm9iID0geDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICB0eXBlOiAnaGlzdG9ncmFtJyxcclxuICAgICAgICAgIGhlaWdodDogd2luZG93LmlubmVyV2lkdGggPCA3NjggPyAnMzAwJzonYXV0bycgIFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgIHRleHQ6ICdEZW5zaWRhZGUgZGUgcHJvYmFiaWxpZGFkZScsXHJcbiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgICBtYXJnaW46IDEwLFxyXG4gICAgICAgICAgZmxvYXRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgZm9udFNpemU6ICAnMjBweCcsXHJcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICAnYm9sZCcsXHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICAnUmFsZXdheScsXHJcbiAgICAgICAgICAgIGNvbG9yOiAgJyNlOWVlZjQnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgICBiYXI6IHtcclxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAzLFxyXG4gICAgICAgICAgICBib3JkZXJSYWRpdXNBcHBsaWNhdGlvbjogJ2VuZCcsXHJcbiAgICAgICAgICAgIGNvbHVtbldpZHRoOiAnODUlJyxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICBuYW1lOiAnUHJvYmFiaWxpZGFkZScsICBcclxuICAgICAgICAgIGRhdGE6IHByb2JzT2ZJbnRlcnZhbHNcclxuICAgICAgICB9XSxcclxuICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgdGlja0Ftb3VudDogd2luZG93LmlubmVyV2lkdGggPCA3NjggPyA2OjEwLFxyXG4gICAgICAgICAgY2F0ZWdvcmllczp2YWx1ZXNPZkF4aXhzWCxcclxuICAgICAgICAgIGxhYmVsczp7XHJcbiAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgY29sb3JzOiAnI2U5ZWVmNCcgIFxyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIH0seWF4aXM6e1xyXG4gICAgICAgICAgdGlja0Ftb3VudDogNCxcclxuICAgICAgICAgIG1pbjowLFxyXG4gICAgICAgICAgbWF4OiAobWF4UHJvYioxLjEpLFxyXG4gICAgICAgICAgbGFiZWxzOntcclxuICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICBjb2xvcnM6ICcjZTllZWY0JyAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgdHlwZTogJ2dyYWRpZW50JyxcclxuICAgICAgICAgIGdyYWRpZW50OiB7XHJcbiAgICAgICAgICAgICAgc2hhZGU6ICdkYXJrJyxcclxuICAgICAgICAgICAgICBncmFkaWVudFRvQ29sb3JzOiBbJyNlNjVjNGYnXSxcclxuICAgICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMSxcclxuICAgICAgICAgICAgICB0eXBlOiAndmVydGljYWwnLFxyXG4gICAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAxLFxyXG4gICAgICAgICAgICAgIG9wYWNpdHlUbzogMSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgICAgY29sb3JzOiAnI2RkOWY4MicsXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGdyYXBoaWNBcmVhLCBvcHRpb25zKTtcclxuICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICAgIFxyXG59IiwiaW1wb3J0IHsgZ2VyVW5pZm9ybVJhbmRWYXJpYWJsZSB9IGZyb20gXCIuL2dlclVuaWZvcm1SYW5kVmFyaWFibGVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXJFeHBWYXJpYWJsZShsYW1iZGEsIHF0ZE9mVmFyaWFibGVzKXtcclxuICAgIHZhciBhID0gW107XHJcbiAgICBnZXJVbmlmb3JtUmFuZFZhcmlhYmxlKGEsMCwxLHF0ZE9mVmFyaWFibGVzKTtcclxuICAgIFxyXG4gICAgdmFyIGV4cEFycmF5ID0gW107XHJcbiAgICBcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBxdGRPZlZhcmlhYmxlczsgaSsrKXtcclxuICAgICAgICBleHBBcnJheS5wdXNoKC0oKDEvbGFtYmRhKSooTWF0aC5sb2coMS1hW2ldKSkpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXhwQXJyYXk7XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBhdmVyYWdlIH0gZnJvbSBcIi4vYXZlcmFnZVwiO1xyXG5pbXBvcnQgeyBnZXJVbmlmb3JtUmFuZFZhcmlhYmxlIH0gZnJvbSBcIi4vZ2VyVW5pZm9ybVJhbmRWYXJpYWJsZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlckdhdXNWYXJpYWJsZShhdmVyYWdlLCB2YXJpYW5jZSwgcXRkT2ZWYXJpYWJsZXMpe1xyXG4gICAgdmFyIGEgPSBbXTtcclxuICAgIHZhciBiID0gW107XHJcbiAgICB2YXIgZ2F1cyA9IFtdO1xyXG4gICAgdmFyIGF1eCA9IDA7XHJcbiAgICBcclxuICAgIGZvcih2YXIgaT0wOyBpPDEyOyBpKyspe1xyXG4gICAgICAgIGIgPSBbXTtcclxuICAgICAgICBnZXJVbmlmb3JtUmFuZFZhcmlhYmxlKGIsMCwxLHF0ZE9mVmFyaWFibGVzKTtcclxuICAgICAgICBhLnB1c2goYik7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKHZhciBqID0gMDsgaiA8IHF0ZE9mVmFyaWFibGVzOyBqKyspe1xyXG4gICAgICAgIGF1eCA9IDA7XHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaTwxMjsgaSsrKXtcclxuICAgICAgICAgICAgYXV4ICs9IGFbaV1bal07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhdXMucHVzaChhdXggLSA2KTtcclxuICAgIH1cclxuICAgIHZhciBtYXggPSBnYXVzWzBdO1xyXG4gICAgdmFyIG1pbiA9IGdhdXNbMF07XHJcblxyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHF0ZE9mVmFyaWFibGVzOyBpKyspe1xyXG4gICAgICAgIGdhdXNbaV0gPSBhdmVyYWdlICsgZ2F1c1tpXSpNYXRoLnNxcnQodmFyaWFuY2UpO1xyXG4gICAgICAgIGlmKGdhdXNbaV0+bWF4KXtcclxuICAgICAgICAgICAgbWF4ID0gZ2F1c1tpXTtcclxuICAgICAgICB9ZWxzZSBpZihnYXVzW2ldPG1pbil7XHJcbiAgICAgICAgICAgIG1pbiA9IGdhdXNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgXCJhcnJheVwiOiBnYXVzLFxyXG4gICAgICAgIFwibWF4VmFsdWVcIjogbWF4LFxyXG4gICAgICAgIFwibWluVmFsdWVcIjogbWluXHJcbiAgICB9O1xyXG4gICAgXHJcbn0iLCJpbXBvcnQgeyBnZXJVbmlmb3JtUmFuZFZhcmlhYmxlIH0gZnJvbSBcIi4vZ2VyVW5pZm9ybVJhbmRWYXJpYWJsZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlcldlaWJ1bGxWYXJpYWJsZSh3ZWlidWxsQXJyYXksIGxhbWJkYSwgYmV0YSwgcXRkT2ZWYXJpYWJsZXMsKXtcclxuICAgIHZhciBhcnJheSA9IFtdO1xyXG5cclxuICAgIGdlclVuaWZvcm1SYW5kVmFyaWFibGUoYXJyYXksMCwxLHF0ZE9mVmFyaWFibGVzKTtcclxuXHJcbiAgICB2YXIgbWF4ID0gLTEwMDAwMDAwO1xyXG4gICAgdmFyIG1pbiA9IDEwMDAwMDAwO1xyXG5cclxuICAgIGlmKGJldGEgPDAgfHwgbGFtYmRhIDwgMCl7XHJcbiAgICAgICAgYWxlcnQoXCJFbnRyZSBjb20gdmFsb3JlcyBtYWlvcmVzIHF1ZSAwXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgdmFyIG1heCA9IFtdXHJcbiAgICAgICAgdmFyIGxuWCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdGRPZlZhcmlhYmxlczsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxuWCA9IC0xICogTWF0aC5sb2coYXJyYXlbaV0pO1xyXG4gICAgICAgICAgICB2YXIgYXV4ID0gTWF0aC5wb3cobG5YLCAxL2JldGEpO1xyXG4gICAgICAgICAgICAvL3ZhciBhdXggPSBNYXRoLnBvdyhNYXRoLmxvZyhhcnJheVtpXSksIDEvYmV0YSk7XHJcbiAgICAgICAgICAgIHdlaWJ1bGxBcnJheS5wdXNoKGxhbWJkYSAqIGF1eCk7XHJcblxyXG4gICAgICAgICAgICBpZih3ZWlidWxsQXJyYXlbaV0+bWF4KXtcclxuICAgICAgICAgICAgICAgIG1heCA9IHdlaWJ1bGxBcnJheVtpXTtcclxuICAgICAgICAgICAgfWVsc2UgaWYod2VpYnVsbEFycmF5W2ldIDwgbWluKXtcclxuICAgICAgICAgICAgICAgIG1pbiA9IHdlaWJ1bGxBcnJheVtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFwibWluXCI6IG1pbixcclxuICAgICAgICBcIm1heFwiOiBtYXhcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge2dlclVuaWZvcm1SYW5kVmFyaWFibGV9IGZyb20gJy4vbGlicy9nZXJVbmlmb3JtUmFuZFZhcmlhYmxlJztcclxuaW1wb3J0IHtnZXJIaXN0b2dyYW19IGZyb20gJy4vbGlicy9nZXJIaXN0b2dyYW0nO1xyXG5pbXBvcnQge2ZpbGxIaXN0b2dyYW19IGZyb20gJy4vbGlicy9maWxsSGlzdG9ncmFtJztcclxuaW1wb3J0IHthdmVyYWdlfSBmcm9tICcuL2xpYnMvYXZlcmFnZSc7XHJcbmltcG9ydCB7Z2VyQ0RGfSBmcm9tICcuL2xpYnMvZ2VyQ0RGJztcclxuaW1wb3J0IHsgcHJpbnRDREYgfSBmcm9tICcuL2xpYnMvcHJpbnRDREYnO1xyXG5pbXBvcnQgeyBwcmludEhpc3RvZ3JhbSB9IGZyb20gJy4vbGlicy9wcmludEhpc3RvZ3JhbSc7XHJcbmltcG9ydCB7Z2VyRXhwVmFyaWFibGV9IGZyb20gJy4vbGlicy9nZXJFeHBWYXJpYWJsZSc7XHJcbmltcG9ydCB7IGdlckdhdXNWYXJpYWJsZSB9IGZyb20gJy4vbGlicy9nZXJHYXVzVmFyaWFibGUnO1xyXG5pbXBvcnQge2dlcldlaWJ1bGxWYXJpYWJsZX0gZnJvbSAnLi9saWJzL2dlcldlaWJ1bGxWYXJpYWJsZSc7XHJcblxyXG52YXIgcmFuZG9tVmFyaWFibGUgPSBbXTtcclxudmFyIGNkZkRhdGE7XHJcblxyXG5jb25zdCByZWZyZXNoR3JhcGggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVmcmVzaEdyYXBoJyk7XHJcbmNvbnN0IGhpc3RvZ3JhbUdyYXBoaWMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JhcGhBcmVhJyk7XHJcbmNvbnN0IGNkZkdyYXBoaWMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2RmR3JhcGhpYycpO1xyXG5cclxuaWYocmVuZGVyQWxsR3JhcGhpY3MoKSl7XHJcbiAgYXZlcmFnZShyYW5kb21WYXJpYWJsZSk7XHJcbn07XHJcblxyXG5yZWZyZXNoR3JhcGguYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT57XHJcbiAgXHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIFxyXG4gIHJlbmRlckFsbEdyYXBoaWNzKCk7XHJcbiAgXHJcbiAgYXZlcmFnZShyYW5kb21WYXJpYWJsZSk7XHJcbiAgXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gcmVuZGVyQWxsR3JhcGhpY3MoKXtcclxuICBcclxuICByYW5kb21WYXJpYWJsZT1bXTtcclxuICBjZGZEYXRhPVtdO1xyXG4gIFxyXG4gIHZhciBvYmpIaXN0b2dyYW0gPSB7XHJcbiAgICBcInF0ZE9mSW50ZXJ2YWxzXCI6MCxcclxuICAgIFwiYXJyYXlJbnRlcnZhbHNcIjpbXVxyXG4gIH1cclxuICBcclxuICB2YXIgdmFsdWVzT2ZBeGl4c1hvbkNERiA9IFtdO1xyXG5cclxuICBjb25zdCBmb3JtICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcclxuICBjb25zdCBpbml0aWFsVmFsdWUgPSBwYXJzZUZsb2F0KGZvcm0ucXVlcnlTZWxlY3RvcignI2luaXRpYWxWYWx1ZScpLnZhbHVlKTtcclxuICBjb25zdCBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNmaW5hbFZhbHVlJykudmFsdWUpO1xyXG4gIGNvbnN0IHF0ZE9mVmFyaWFibGVzID0gcGFyc2VGbG9hdChmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNxdGRPZlZhcmlhYmxlcycpLnZhbHVlKTtcclxuICBjb25zdCBpbnRlcnZhbHMgPSBwYXJzZUZsb2F0KGZvcm0ucXVlcnlTZWxlY3RvcignI2ludGVydmFscycpLnZhbHVlKTtcclxuICBjb25zdCB0eXBlT2ZWYXJpYWJsZSA9IGZvcm0ucXVlcnlTZWxlY3RvcihcImlucHV0OmNoZWNrZWRcIik7XHJcbiAgXHJcbiAgc3dpdGNoKHR5cGVPZlZhcmlhYmxlLnZhbHVlKXtcclxuICAgIGNhc2UgXCJ1bmlmb3JtXCI6XHJcbiAgICBnZXJVbmlmb3JtUmFuZFZhcmlhYmxlKHJhbmRvbVZhcmlhYmxlLCBpbml0aWFsVmFsdWUsIGZpbmFsVmFsdWUsIHF0ZE9mVmFyaWFibGVzKTtcclxuICAgIGdlckhpc3RvZ3JhbShpbnRlcnZhbHMsIG9iakhpc3RvZ3JhbSwgaW5pdGlhbFZhbHVlLCBmaW5hbFZhbHVlKTtcclxuICAgIGZpbGxIaXN0b2dyYW0ocmFuZG9tVmFyaWFibGUsIG9iakhpc3RvZ3JhbSk7XHJcbiAgICBjZGZEYXRhID0gZ2VyQ0RGKHJhbmRvbVZhcmlhYmxlLCBjZGZEYXRhLCBpbml0aWFsVmFsdWUsIGZpbmFsVmFsdWUscXRkT2ZWYXJpYWJsZXMpO1xyXG4gICAgdmFsdWVzT2ZBeGl4c1hvbkNERiA9IFtpbml0aWFsVmFsdWVdO1xyXG4gICAgYnJlYWs7XHJcbiAgICBcclxuICAgIGNhc2UgXCJ3ZWlidWxsXCI6XHJcbiAgICBjb25zdCBsYW1iZGFXID0gcGFyc2VGbG9hdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGFtYmRhVycpLnZhbHVlKTtcclxuICAgIGNvbnN0IGJldGFXID0gcGFyc2VGbG9hdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYmV0YVcnKS52YWx1ZSk7XHJcbiAgICB2YXIgbWluTWF4ID0gZ2VyV2VpYnVsbFZhcmlhYmxlKHJhbmRvbVZhcmlhYmxlLCBsYW1iZGFXLCBiZXRhVywgcXRkT2ZWYXJpYWJsZXMpO1xyXG4gICAgZ2VySGlzdG9ncmFtKGludGVydmFscywgb2JqSGlzdG9ncmFtLCAobWluTWF4Lm1pbiowLjQwKSwgKG1pbk1heC5tYXgpKTtcclxuICAgIGZpbGxIaXN0b2dyYW0ocmFuZG9tVmFyaWFibGUsIG9iakhpc3RvZ3JhbSk7XHJcbiAgICBjZGZEYXRhID0gZ2VyQ0RGKHJhbmRvbVZhcmlhYmxlLCBjZGZEYXRhLCAobWluTWF4Lm1pbiowLjk4KSwgKG1pbk1heC5tYXgqMS4wMSkgLHF0ZE9mVmFyaWFibGVzKTtcclxuICAgIHZhbHVlc09mQXhpeHNYb25DREYgPSBbbWluTWF4Lm1pbiowLjk4XTtcclxuICAgIGJyZWFrO1xyXG4gICAgXHJcbiAgICBjYXNlIFwiZXhwb25lbnRpYWxcIjpcclxuICAgIGNvbnN0IGxhbWJkYSA9IHBhcnNlRmxvYXQoZm9ybS5xdWVyeVNlbGVjdG9yKFwiI2xhbWJkYVwiKS52YWx1ZSk7XHJcbiAgICB2YXIgZmluYWxWYWwgPSAtKCgxL2xhbWJkYSkqKE1hdGgubG9nKDEtMC45OTk1NCkpKTtcclxuICAgIHJhbmRvbVZhcmlhYmxlID0gZ2VyRXhwVmFyaWFibGUobGFtYmRhLCBxdGRPZlZhcmlhYmxlcyk7XHJcbiAgICBnZXJIaXN0b2dyYW0oaW50ZXJ2YWxzLCBvYmpIaXN0b2dyYW0sIDAsIGZpbmFsVmFsKTtcclxuICAgIGZpbGxIaXN0b2dyYW0ocmFuZG9tVmFyaWFibGUsIG9iakhpc3RvZ3JhbSk7XHJcbiAgICBjZGZEYXRhID0gZ2VyQ0RGKHJhbmRvbVZhcmlhYmxlLCBjZGZEYXRhLCAwLCBmaW5hbFZhbCxxdGRPZlZhcmlhYmxlcyk7XHJcbiAgICB2YWx1ZXNPZkF4aXhzWG9uQ0RGID0gWzBdXHJcbiAgICBicmVhaztcclxuICAgIFxyXG4gICAgY2FzZSBcImdhdXNzaWFuYVwiOlxyXG4gICAgY29uc3QgdmFyaWFuY2UyID0gcGFyc2VGbG9hdChmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjdmFyaWFuY2VcIikudmFsdWUpO1xyXG4gICAgY29uc3QgYXZlcmFnZTIgPSBwYXJzZUZsb2F0KGZvcm0ucXVlcnlTZWxlY3RvcihcIiNhdmVyYWdlXCIpLnZhbHVlKTtcclxuICAgIFxyXG4gICAgdmFyIGF1eCA9IGdlckdhdXNWYXJpYWJsZShhdmVyYWdlMiwgdmFyaWFuY2UyLHF0ZE9mVmFyaWFibGVzKTtcclxuICAgIFxyXG4gICAgcmFuZG9tVmFyaWFibGUgPSBhdXguYXJyYXk7XHJcbiAgICBnZXJIaXN0b2dyYW0oaW50ZXJ2YWxzLCBvYmpIaXN0b2dyYW0sIGF1eC5taW5WYWx1ZSAsIGF1eC5tYXhWYWx1ZSk7XHJcbiAgICBcclxuICAgIGZpbGxIaXN0b2dyYW0ocmFuZG9tVmFyaWFibGUsIG9iakhpc3RvZ3JhbSk7XHJcbiAgICBjZGZEYXRhID0gZ2VyQ0RGKHJhbmRvbVZhcmlhYmxlLCBjZGZEYXRhLCBhdXgubWluVmFsdWUgLCBhdXgubWF4VmFsdWUscXRkT2ZWYXJpYWJsZXMpO1xyXG4gICAgdmFsdWVzT2ZBeGl4c1hvbkNERiA9IFthdXgubWluVmFsdWVdXHJcbiAgICBicmVhaztcclxuICAgIFxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gXHJcbiAgc2V0VGltZW91dCgoKSA9PntcclxuICAgIHZhciB2YWx1ZXNPZkF4aXhzWCA9IFtdOyBcclxuICAgIHZhciBjb3VudCA9IFtdO1xyXG4gICAgXHJcbiAgICB2YXIgY291bnRPZkNERiA9IFswXTtcclxuXHJcbiAgICBvYmpIaXN0b2dyYW0uYXJyYXlJbnRlcnZhbHMuZm9yRWFjaChlID0+IHtcclxuICAgICAgdmFsdWVzT2ZBeGl4c1gucHVzaChgXHJcbiAgICAgICR7ZS5pbmRleE9mSW50ZXJ2YWwudG9GaXhlZCgyKS50b1N0cmluZygpfSAtXHJcbiAgICAgICR7KGUuaW5kZXhPZkludGVydmFsKygoZmluYWxWYWx1ZSAtIGluaXRpYWxWYWx1ZSkvaW50ZXJ2YWxzKSkudG9GaXhlZCgyKS50b1N0cmluZygpfWApO1xyXG4gICAgICBjb3VudC5wdXNoKGUuY291bnQvcXRkT2ZWYXJpYWJsZXMpOyBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjZGZEYXRhLmZvckVhY2goZSA9PiB7XHJcbiAgICAgIHZhbHVlc09mQXhpeHNYb25DREYucHVzaChgXHJcbiAgICAgICR7ZS5pbmRleE9mSW50ZXJ2YWwudG9GaXhlZCgyKX1gKTtcclxuICAgICAgXHJcbiAgICAgIGNvdW50T2ZDREYucHVzaChlLnByb2IudG9GaXhlZCg0KSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcHJpbnRIaXN0b2dyYW0oY291bnQsIHZhbHVlc09mQXhpeHNYLCBoaXN0b2dyYW1HcmFwaGljKTtcclxuICAgIFxyXG4gICAgcHJpbnRDREYoY291bnRPZkNERix2YWx1ZXNPZkF4aXhzWG9uQ0RGLGNkZkdyYXBoaWMpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhjZGZEYXRhLmluZGV4T2ZJbnRlcnZhbHMpO1xyXG5cclxuICB9LDApO1xyXG4gIFxyXG4gIHJldHVybiB0cnVlO1xyXG4gIFxyXG59XHJcblxyXG4iLCJpbXBvcnQgJy4uL3Njc3Mvc3R5bGVzLnNjc3MnXHJcbmltcG9ydCAnLi9vYnNlcnZlcidcclxuaW1wb3J0ICcuL3JlbmRlckhpc3RvZ3JhbSciXSwibmFtZXMiOlsiZ2V0UmFuZG9tSW50IiwibWluIiwibWF4IiwiTWF0aCIsImNlaWwiLCJmbG9vciIsInJhbmRvbSIsImdlclVuaWZvcm1SYW5kVmFyaWFibGUiLCJlbXB0eUFycmF5IiwiaW5pdFZhbHVlIiwiZmluYWxWYWx1ZSIsInF0ZE9mVmFyaWFibGVzIiwicmFuZ2UiLCJtb2QiLCJzZWVkIiwiYyIsInB1c2giLCJpIiwiZ2VySGlzdG9ncmFtIiwiaW50ZXJ2YWxzIiwib2JqIiwiZGVsdGFYIiwiYXJyYXlJbnRlcnZhbHMiLCJmaWxsSGlzdG9ncmFtIiwiQWxlYXRvcnlWYXIiLCJIaXN0b2dyYW0iLCJsZW5ndGgiLCJqIiwiaW5kZXhPZkludGVydmFsIiwiY291bnQiLCJhdmVyYWdlIiwicmFuZG9tVmFyIiwidmFyaWFuY2UiLCJzdW0iLCJyZWR1Y2UiLCJhY2MiLCJjdXJyZW50IiwibWVkaWEiLCJmb3JFYWNoIiwiZSIsInBvdyIsImF2ZXJhZ2VCbG9jayIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInZhcmlhbmNlQmxvY2siLCJpbm5lckhUTUwiLCJ0b0ZpeGVkIiwidG9TdHJpbmciLCJyZXBsYWNlIiwiZ2VyQ0RGIiwiY2RmRGF0YSIsInByb2IiLCJwcmludENERiIsInByb2JzT2ZDREYiLCJ2YWx1ZXNPZkF4aXhzWG9uQ0RGIiwiY2RmR3JhcGhpYyIsIm9wdGlvbnMyIiwiY2hhcnQiLCJ0eXBlIiwiaGVpZ2h0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsInRpdGxlIiwidGV4dCIsImFsaWduIiwibWFyZ2luIiwiZmxvYXRpbmciLCJzdHlsZSIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsImZvbnRGYW1pbHkiLCJjb2xvciIsInN0cm9rZSIsImN1cnZlIiwibGluZUNhcCIsImNvbG9ycyIsInNlcmllcyIsIm5hbWUiLCJkYXRhIiwiZmlsbCIsImdyYWRpZW50Iiwic2hhZGUiLCJncmFkaWVudFRvQ29sb3JzIiwic2hhZGVJbnRlbnNpdHkiLCJvcGFjaXR5RnJvbSIsIm9wYWNpdHlUbyIsInhheGlzIiwidGlja0Ftb3VudCIsImNhdGVnb3JpZXMiLCJsYWJlbHMiLCJ5YXhpcyIsImNoYXJ0MiIsIkFwZXhDaGFydHMiLCJyZW5kZXIiLCJwcmludEhpc3RvZ3JhbSIsInByb2JzT2ZJbnRlcnZhbHMiLCJ2YWx1ZXNPZkF4aXhzWCIsImdyYXBoaWNBcmVhIiwibWF4UHJvYiIsIngiLCJvcHRpb25zIiwicGxvdE9wdGlvbnMiLCJiYXIiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJSYWRpdXNBcHBsaWNhdGlvbiIsImNvbHVtbldpZHRoIiwiZGF0YUxhYmVscyIsImVuYWJsZWQiLCJnZXJFeHBWYXJpYWJsZSIsImxhbWJkYSIsImEiLCJleHBBcnJheSIsImxvZyIsImdlckdhdXNWYXJpYWJsZSIsImIiLCJnYXVzIiwiYXV4Iiwic3FydCIsImdlcldlaWJ1bGxWYXJpYWJsZSIsIndlaWJ1bGxBcnJheSIsImJldGEiLCJhcnJheSIsImFsZXJ0IiwibG5YIiwicmFuZG9tVmFyaWFibGUiLCJyZWZyZXNoR3JhcGgiLCJoaXN0b2dyYW1HcmFwaGljIiwicmVuZGVyQWxsR3JhcGhpY3MiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJvYmpIaXN0b2dyYW0iLCJmb3JtIiwiaW5pdGlhbFZhbHVlIiwicGFyc2VGbG9hdCIsInZhbHVlIiwidHlwZU9mVmFyaWFibGUiLCJsYW1iZGFXIiwiYmV0YVciLCJtaW5NYXgiLCJmaW5hbFZhbCIsInZhcmlhbmNlMiIsImF2ZXJhZ2UyIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsInNldFRpbWVvdXQiLCJjb3VudE9mQ0RGIiwiY29uc29sZSIsImluZGV4T2ZJbnRlcnZhbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///852\n")},501:()=>{eval("var fieldsetCheck = document.querySelector('.fieldsetParemeters');\nvar gaussianaInputArea = document.querySelector('.gaussianaInputArea');\nvar uniformInputArea = document.querySelector('.uniformInputArea');\nvar exponentialInputArea = document.querySelector('.exponentialInputArea');\nvar weibullInputArea = document.querySelector('.weibullInputArea');\nvar explainParameters = document.querySelector('.explainParameters');\nchangeType();\nfunction changeType() {\n  gaussianaInputArea.style.display = 'none';\n  var typOfVariable = fieldsetCheck.querySelector('input:checked');\n  if (typOfVariable.value == 'exponential') {\n    exponentialInputArea.style.display = 'flex';\n    uniformInputArea.style.display = 'none';\n    gaussianaInputArea.style.display = 'none';\n    weibullInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <h2>Variavel Exponencial</h2><br>\\n        <p>\\n        Uma vari\\xE1vel com distribui\\xE7\\xE3o exponencial pode ser gerada a partir de uma vari\\xE1vel aleat\\xF3ria entre 0 e 1. Para isso, basta aplicar a inversa da CDF em \\u2018x\\u2019 da vari\\xE1vel uniforme <code>\\n        expArray.push(-(( 1/\\u03BB ) * ( Math.log( 1-a[i] ) )))\\n        </code>\\n        onde \\u2018expArray\\u2019 \\xE9 o vetor que armazena todas as vari\\xE1veis aleat\\xF3rias exponenciais. E <code> push() </code> \\xE9 a fun\\xE7\\xE3o respons\\xE1vel por alocar o resultado dessa transforma\\xE7\\xE3o no vetor. <code> -(1/\\u03BB)*(Math.log(1-a[i]))  </code> \\xE9 a equa\\xE7\\xE3o que gera qualquer vari\\xE1vel exponencial a partir de uma uniforme. Onde< code> Math.log(1-a[i])</code> usa o valor da vari\\xE1vel uniforme e calcular o log e <code> -(1/\\u03BB) </code> \\xE9 o par\\xE2metro que regula o comportamento da sua distribui\\xE7\\xE3o. Valores de \\u03BB muito altos a sua densidade se aproxima de 0.\\n        <br><br>\\n        A vari\\xE2ncia e media est\\xE3o muito pr\\xF3ximas dos valores estimados com uma margem de erro m\\xEDnima, isso \\xE9 de esperado devido a quantidade de n\\xFAmeros aleatoriamente gerados.\\n        </p>\\n        \";\n  } else if (typOfVariable.value == 'gaussiana') {\n    gaussianaInputArea.style.display = 'flex';\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'none';\n    weibullInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <h2>Variavel Gaussiana</h2><br>\\n        <p>\\n        Primeiro tenho o vetor b respons\\xE1vel por receber as 12 vari\\xE1veis aleat\\xF3rias geradas para forma uma distribui\\xE7\\xE3o gaussiana. O vetor a recebe os valores de b formando uma matriz<sub>12x10000</sub> e ap\\xF3s isso somo os valores de cada \\xEDndice de coluna de todas as 12 vari\\xE1veis uniformes e coloco essa soma no mesmo \\xEDndice do vetor <code>gaus[]</code> para em seguida transformar o vetor com a equa\\xE7\\xE3o <code>\\n        gaus[i] = average + gaus[i] * Math.sqrt(variance)\\n        </code>. Com isso, \\xE9 poss\\xEDvel calcular qualquer vari\\xE1vel de distribui\\xE7\\xE3o gaussiana a partir da sua m\\xE9dia e vari\\xE2ncia. <br><br>\\n        A vari\\xE2ncia e media est\\xE3o muito pr\\xF3ximas dos valores estimados com uma margem de erro m\\xEDnima, isso \\xE9 de esperado devido a quantidade de n\\xFAmeros aleatoriamente gerados.\\n\\n        </p>\\n        \";\n  } else if (typOfVariable.value == 'weibull') {\n    weibullInputArea.style.display = 'flex';\n    gaussianaInputArea.style.display = 'none';\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <h2>Variavel de distribui\\xE7\\xE3o Weibull</h2><br>\\n        <p>\\n        Para gerar essa vari\\xE1vel aleat\\xF3ria foi preciso calcular a CDF<sup>-1</sup> e aplica em uma vari\\xE1vel aleat\\xF3ria uniforme entre 0 e 1. \\n        Primeiro calculei o log de x<sub>i</sub> com a fun\\xE7\\xE3o <code>\\n        -1 * Math.log(array[i])\\n        </code> em seguida coloquei o ln (x<sub>i</sub>) na fun\\xE7\\xE3o <code> aux = Math.pow(lnX, 1/beta)</code> que calcula qualquer valor da raiz dada por \\u03B2 e por \\xFAltimo com o m\\xE9todo <code> weibullArray.push(\\u03BB * aux) </code>.\\n\\n        <br><br>\\n        A vari\\xE2ncia e media est\\xE3o muito pr\\xF3ximas dos valores estimados com uma margem de erro m\\xEDnima, isso \\xE9 de esperado devido a quantidade de n\\xFAmeros aleatoriamente gerados.\\n\\n        </p>\\n        \";\n  } else {\n    exponentialInputArea.style.display = 'none';\n    uniformInputArea.style.display = 'flex';\n    gaussianaInputArea.style.display = 'none';\n    weibullInputArea.style.display = 'none';\n    explainParameters.innerHTML = \"\\n        <h2>Variavel Uniforme</h2><br>\\n        <p>\\n        Usando o m\\xE9todo congru\\xEAncial de gera\\xE7\\xE3o de vari\\xE1vel aleat\\xF3ria uniforme \\xE9 seguindo seguintes par\\xE2metros abaixo \\xE9 poss\\xEDvel gerar qualquer vari\\xE1vel aleat\\xF3ria uniforme: \\n        <code>\\n        seed = ((a * seed + c) % mod)\\n        </code> onde 13 foi o melhor valor para 'a' encontrado para evitar valores c\\xEDclicos das vari\\xE1veis. A escolha aleat\\xF3ria da <code>seed\\n        </code> foi dada por uma fun\\xE7\\xE3o nativa do JavaScript. E o valor do modulo, como visto em aula, foi um valor inteiro suficientemente grande para evitar valores c\\xEDclicos e menor que 2<sup>64</sup> tornando o algoritmo menos pesado. O valor de 'c' tamb\\xE9m foi escolhido aleatoriamente sendo menor que o valor do modulo.\\n        <br><br>\\n        \\n        E por \\xFAltimo a fun\\xE7\\xE3o abaixo respons\\xE1vel por gerar vari\\xE1veis aleat\\xF3rias de qualquer valor.\\n        <code>\\n        emptyArray.push((( seed * range ) / mod) + initValue )\\n        </code> em que \\u2018range\\u2019 \\xE9 o intervalo da vari\\xE1vel e \\u2018initiValue\\u2019 \\xE9 onde a vari\\xE1vel come\\xE7a seu intervalo.\\n        <br><br>\\n        A vari\\xE2ncia e media est\\xE3o muito pr\\xF3ximas dos valores estimados com uma margem de erro m\\xEDnima, isso \\xE9 de esperado devido a quantidade de n\\xFAmeros aleatoriamente gerados.\\n\\n        </p>\\n        \";\n  }\n}\nfieldsetCheck.addEventListener('change', function (e) {\n  changeType();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///501\n")}},__webpack_module_cache__={};function __webpack_require__(F){var Q=__webpack_module_cache__[F];if(void 0!==Q)return Q.exports;var U=__webpack_module_cache__[F]={exports:{}};return __webpack_modules__[F](U,U.exports,__webpack_require__),U.exports}var __webpack_exports__=__webpack_require__(852)})();