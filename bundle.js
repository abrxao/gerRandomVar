(()=>{"use strict";var __webpack_modules__={99:()=>{eval("\n;// CONCATENATED MODULE: ./src/js/libs/gerUniformRandVariable.js\nfunction gerUniformRandVariable(emptyArray, initValue, finalValue, qtdOfVariables) {\n  var range = finalValue - initValue;\n  var seed = new Date().getMilliseconds() % range;\n  emptyArray.push(seed);\n  var a = range % 2 == 0 ? 5 : new Date().getMilliseconds();\n  for (var i = 0; i < qtdOfVariables - 1; i++) {\n    seed = (a * seed + range / qtdOfVariables) % range + initValue;\n    emptyArray.push(seed);\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/gerHistogram.js\nfunction gerHistogram(intervals, obj, initValue, finalValue) {\n  var deltaX = (finalValue - initValue) / intervals;\n  for (var i = 0; i < intervals; i++) {\n    obj.arrayIntervals.push({\n      \"indexOfInterval\": deltaX * i + initValue,\n      \"count\": 0\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/fillHistogram.js\nfunction fillHistogram(AleatoryVar, Histogram) {\n  for (var i = 0; i < AleatoryVar.length; i++) {\n    for (var j = Histogram.arrayIntervals.length; j >= 1; j--) {\n      if (Histogram.arrayIntervals[j - 1].indexOfInterval <= AleatoryVar[i]) {\n        Histogram.arrayIntervals[j - 1].count++;\n        break;\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/js/libs/average.js\nfunction average(randomVar) {\n  var variance = 0;\n  var sum = randomVar.reduce(function (acc, current) {\n    return acc + current;\n  }, 0);\n  randomVar.forEach(function (e) {\n    variance = +Math.pow(sum / randomVar.length - e, 2);\n  });\n  var averageBlock = document.getElementById('average');\n  var varianceBlock = document.getElementById('variance');\n  averageBlock.innerHTML = \"media \\xE9 \".concat((sum / randomVar.length).toFixed(3));\n  varianceBlock.innerHTML = \"a variancia \\xE9 \".concat(variance / randomVar.length);\n}\n;// CONCATENATED MODULE: ./src/js/renderHistogram.js\n\n\n\n\nvar uniformRandVariable = [];\nvar avg = 0;\nvar refreshGraph = document.querySelector('#refreshGraph');\nvar graph = document.querySelector('.graphArea');\nvar renderHistogram_form = document.querySelector('form.inputs');\nrenderHistogram();\nrefreshGraph.addEventListener('click', function (e) {\n  e.preventDefault();\n  renderHistogram();\n  average(uniformRandVariable);\n});\nfunction renderHistogram() {\n  var initialValue = parseFloat(renderHistogram_form.querySelector('#initialValue').value);\n  var finalValue = parseFloat(renderHistogram_form.querySelector('#finalValue').value);\n  var qtdOfVariables = parseFloat(renderHistogram_form.querySelector('#qtdOfVariables').value);\n  var intervals = parseFloat(renderHistogram_form.querySelector('#intervals').value);\n  uniformRandVariable = [];\n  var objHistogram = {\n    \"qtdOfIntervals\": 0,\n    \"arrayIntervals\": []\n  };\n  gerUniformRandVariable(uniformRandVariable, initialValue, finalValue, qtdOfVariables);\n  gerHistogram(intervals, objHistogram, initialValue, finalValue);\n  fillHistogram(uniformRandVariable, objHistogram);\n  var valuesOfAxixsX = [];\n  var count = [];\n  objHistogram.arrayIntervals.forEach(function (e) {\n    valuesOfAxixsX.push(\"\\n    \".concat(e.indexOfInterval.toFixed(2).toString(), \" -\\n    \").concat((e.indexOfInterval + (finalValue - initialValue) / intervals).toFixed(2).toString()));\n    count.push(e.count / qtdOfVariables);\n  });\n  var options = {\n    chart: {\n      type: 'histogram'\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 3,\n        borderRadiusApplication: 'end',\n        columnWidth: '95%'\n      }\n    },\n    series: [{\n      data: count\n    }],\n    xaxis: {\n      categories: valuesOfAxixsX\n    },\n    yaxis: {\n      tickAmount: 8,\n      min: 0,\n      max: 1\n    },\n    colors: ['#208174', '#66DA26', '#546E7A', '#E91E63', '#FF9800']\n  };\n  setTimeout(function () {\n    graph.innerHTML = '';\n    var chart = new ApexCharts(graph, options);\n    chart.render();\n  }, 0);\n}\n;// CONCATENATED MODULE: ./src/js/index.js\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99\n")}},__webpack_exports__={};__webpack_modules__[99]()})();